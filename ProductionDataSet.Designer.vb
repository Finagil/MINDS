'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ProductionDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProductionDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableClientes As ClientesDataTable
    
    Private tableAnexos As AnexosDataTable
    
    Private tableAvios As AviosDataTable
    
    Private tableVw_MAXfecVen As Vw_MAXfecVenDataTable
    
    Private tableEdoctav As EdoctavDataTable
    
    Private tableMinds_Pagos_Avio As Minds_Pagos_AvioDataTable
    
    Private tablePromotores As PromotoresDataTable
    
    Private tableReferenciadoEnEfectivo As ReferenciadoEnEfectivoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("Anexos")) Is Nothing) Then
                MyBase.Tables.Add(New AnexosDataTable(ds.Tables("Anexos")))
            End If
            If (Not (ds.Tables("Avios")) Is Nothing) Then
                MyBase.Tables.Add(New AviosDataTable(ds.Tables("Avios")))
            End If
            If (Not (ds.Tables("Vw_MAXfecVen")) Is Nothing) Then
                MyBase.Tables.Add(New Vw_MAXfecVenDataTable(ds.Tables("Vw_MAXfecVen")))
            End If
            If (Not (ds.Tables("Edoctav")) Is Nothing) Then
                MyBase.Tables.Add(New EdoctavDataTable(ds.Tables("Edoctav")))
            End If
            If (Not (ds.Tables("Minds_Pagos_Avio")) Is Nothing) Then
                MyBase.Tables.Add(New Minds_Pagos_AvioDataTable(ds.Tables("Minds_Pagos_Avio")))
            End If
            If (Not (ds.Tables("Promotores")) Is Nothing) Then
                MyBase.Tables.Add(New PromotoresDataTable(ds.Tables("Promotores")))
            End If
            If (Not (ds.Tables("ReferenciadoEnEfectivo")) Is Nothing) Then
                MyBase.Tables.Add(New ReferenciadoEnEfectivoDataTable(ds.Tables("ReferenciadoEnEfectivo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clientes() As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Anexos() As AnexosDataTable
        Get
            Return Me.tableAnexos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Avios() As AviosDataTable
        Get
            Return Me.tableAvios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Vw_MAXfecVen() As Vw_MAXfecVenDataTable
        Get
            Return Me.tableVw_MAXfecVen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Edoctav() As EdoctavDataTable
        Get
            Return Me.tableEdoctav
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Minds_Pagos_Avio() As Minds_Pagos_AvioDataTable
        Get
            Return Me.tableMinds_Pagos_Avio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Promotores() As PromotoresDataTable
        Get
            Return Me.tablePromotores
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReferenciadoEnEfectivo() As ReferenciadoEnEfectivoDataTable
        Get
            Return Me.tableReferenciadoEnEfectivo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ProductionDataSet = CType(MyBase.Clone,ProductionDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("Anexos")) Is Nothing) Then
                MyBase.Tables.Add(New AnexosDataTable(ds.Tables("Anexos")))
            End If
            If (Not (ds.Tables("Avios")) Is Nothing) Then
                MyBase.Tables.Add(New AviosDataTable(ds.Tables("Avios")))
            End If
            If (Not (ds.Tables("Vw_MAXfecVen")) Is Nothing) Then
                MyBase.Tables.Add(New Vw_MAXfecVenDataTable(ds.Tables("Vw_MAXfecVen")))
            End If
            If (Not (ds.Tables("Edoctav")) Is Nothing) Then
                MyBase.Tables.Add(New EdoctavDataTable(ds.Tables("Edoctav")))
            End If
            If (Not (ds.Tables("Minds_Pagos_Avio")) Is Nothing) Then
                MyBase.Tables.Add(New Minds_Pagos_AvioDataTable(ds.Tables("Minds_Pagos_Avio")))
            End If
            If (Not (ds.Tables("Promotores")) Is Nothing) Then
                MyBase.Tables.Add(New PromotoresDataTable(ds.Tables("Promotores")))
            End If
            If (Not (ds.Tables("ReferenciadoEnEfectivo")) Is Nothing) Then
                MyBase.Tables.Add(New ReferenciadoEnEfectivoDataTable(ds.Tables("ReferenciadoEnEfectivo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableClientes = CType(MyBase.Tables("Clientes"),ClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientes) Is Nothing) Then
                Me.tableClientes.InitVars
            End If
        End If
        Me.tableAnexos = CType(MyBase.Tables("Anexos"),AnexosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAnexos) Is Nothing) Then
                Me.tableAnexos.InitVars
            End If
        End If
        Me.tableAvios = CType(MyBase.Tables("Avios"),AviosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAvios) Is Nothing) Then
                Me.tableAvios.InitVars
            End If
        End If
        Me.tableVw_MAXfecVen = CType(MyBase.Tables("Vw_MAXfecVen"),Vw_MAXfecVenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVw_MAXfecVen) Is Nothing) Then
                Me.tableVw_MAXfecVen.InitVars
            End If
        End If
        Me.tableEdoctav = CType(MyBase.Tables("Edoctav"),EdoctavDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEdoctav) Is Nothing) Then
                Me.tableEdoctav.InitVars
            End If
        End If
        Me.tableMinds_Pagos_Avio = CType(MyBase.Tables("Minds_Pagos_Avio"),Minds_Pagos_AvioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMinds_Pagos_Avio) Is Nothing) Then
                Me.tableMinds_Pagos_Avio.InitVars
            End If
        End If
        Me.tablePromotores = CType(MyBase.Tables("Promotores"),PromotoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePromotores) Is Nothing) Then
                Me.tablePromotores.InitVars
            End If
        End If
        Me.tableReferenciadoEnEfectivo = CType(MyBase.Tables("ReferenciadoEnEfectivo"),ReferenciadoEnEfectivoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReferenciadoEnEfectivo) Is Nothing) Then
                Me.tableReferenciadoEnEfectivo.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ProductionDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProductionDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableClientes = New ClientesDataTable()
        MyBase.Tables.Add(Me.tableClientes)
        Me.tableAnexos = New AnexosDataTable()
        MyBase.Tables.Add(Me.tableAnexos)
        Me.tableAvios = New AviosDataTable()
        MyBase.Tables.Add(Me.tableAvios)
        Me.tableVw_MAXfecVen = New Vw_MAXfecVenDataTable()
        MyBase.Tables.Add(Me.tableVw_MAXfecVen)
        Me.tableEdoctav = New EdoctavDataTable()
        MyBase.Tables.Add(Me.tableEdoctav)
        Me.tableMinds_Pagos_Avio = New Minds_Pagos_AvioDataTable()
        MyBase.Tables.Add(Me.tableMinds_Pagos_Avio)
        Me.tablePromotores = New PromotoresDataTable()
        MyBase.Tables.Add(Me.tablePromotores)
        Me.tableReferenciadoEnEfectivo = New ReferenciadoEnEfectivoDataTable()
        MyBase.Tables.Add(Me.tableReferenciadoEnEfectivo)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAnexos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAvios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVw_MAXfecVen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEdoctav() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMinds_Pagos_Avio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePromotores() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeReferenciadoEnEfectivo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProductionDataSet = New ProductionDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AnexosRowChangeEventHandler(ByVal sender As Object, ByVal e As AnexosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AviosRowChangeEventHandler(ByVal sender As Object, ByVal e As AviosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Vw_MAXfecVenRowChangeEventHandler(ByVal sender As Object, ByVal e As Vw_MAXfecVenRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EdoctavRowChangeEventHandler(ByVal sender As Object, ByVal e As EdoctavRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Minds_Pagos_AvioRowChangeEventHandler(ByVal sender As Object, ByVal e As Minds_Pagos_AvioRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PromotoresRowChangeEventHandler(ByVal sender As Object, ByVal e As PromotoresRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ReferenciadoEnEfectivoRowChangeEventHandler(ByVal sender As Object, ByVal e As ReferenciadoEnEfectivoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnDescr As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnSucursal As Global.System.Data.DataColumn
        
        Private columnPromo As Global.System.Data.DataColumn
        
        Private columnGestor As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnColonia As Global.System.Data.DataColumn
        
        Private columnDelegacion As Global.System.Data.DataColumn
        
        Private columnCopos As Global.System.Data.DataColumn
        
        Private columnTelef1 As Global.System.Data.DataColumn
        
        Private columnTelef2 As Global.System.Data.DataColumn
        
        Private columnTelef3 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnFecha1 As Global.System.Data.DataColumn
        
        Private columnGiro As Global.System.Data.DataColumn
        
        Private columnPlaza As Global.System.Data.DataColumn
        
        Private columnRFC As Global.System.Data.DataColumn
        
        Private columnCURP As Global.System.Data.DataColumn
        
        Private columnEMail1 As Global.System.Data.DataColumn
        
        Private columnEMail2 As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnCuentaBancomer As Global.System.Data.DataColumn
        
        Private columnCuentaCLABE As Global.System.Data.DataColumn
        
        Private columnGeneClie As Global.System.Data.DataColumn
        
        Private columnNomrepr As Global.System.Data.DataColumn
        
        Private columnGenerepr As Global.System.Data.DataColumn
        
        Private columnPoderepr As Global.System.Data.DataColumn
        
        Private columnNomrepr2 As Global.System.Data.DataColumn
        
        Private columnGenerep2 As Global.System.Data.DataColumn
        
        Private columnPoderep2 As Global.System.Data.DataColumn
        
        Private columnCoac As Global.System.Data.DataColumn
        
        Private columnTipcoac As Global.System.Data.DataColumn
        
        Private columnNomcoac As Global.System.Data.DataColumn
        
        Private columnGenecoac As Global.System.Data.DataColumn
        
        Private columnNomrcoac As Global.System.Data.DataColumn
        
        Private columnGenercoa As Global.System.Data.DataColumn
        
        Private columnPodercoa As Global.System.Data.DataColumn
        
        Private columnObli As Global.System.Data.DataColumn
        
        Private columnTipoObli As Global.System.Data.DataColumn
        
        Private columnNomObli As Global.System.Data.DataColumn
        
        Private columnGeneObli As Global.System.Data.DataColumn
        
        Private columnNomrObl As Global.System.Data.DataColumn
        
        Private columnGenerObl As Global.System.Data.DataColumn
        
        Private columnPoderObl As Global.System.Data.DataColumn
        
        Private columnAval1 As Global.System.Data.DataColumn
        
        Private columnTipaval1 As Global.System.Data.DataColumn
        
        Private columnNomaval1 As Global.System.Data.DataColumn
        
        Private columnGeneava1 As Global.System.Data.DataColumn
        
        Private columnNomrava1 As Global.System.Data.DataColumn
        
        Private columnGenerav1 As Global.System.Data.DataColumn
        
        Private columnPoderav1 As Global.System.Data.DataColumn
        
        Private columnAval2 As Global.System.Data.DataColumn
        
        Private columnTipaval2 As Global.System.Data.DataColumn
        
        Private columnNomaval2 As Global.System.Data.DataColumn
        
        Private columnGeneAva2 As Global.System.Data.DataColumn
        
        Private columnNomrava2 As Global.System.Data.DataColumn
        
        Private columnGenerav2 As Global.System.Data.DataColumn
        
        Private columnPoderav2 As Global.System.Data.DataColumn
        
        Private columnAgrupa As Global.System.Data.DataColumn
        
        Private columnSegVida As Global.System.Data.DataColumn
        
        Private columnTasaIVACliente As Global.System.Data.DataColumn
        
        Private columnCuentadePago1 As Global.System.Data.DataColumn
        
        Private columnFormadePago1 As Global.System.Data.DataColumn
        
        Private columnCuentadePago2 As Global.System.Data.DataColumn
        
        Private columnFormadePago2 As Global.System.Data.DataColumn
        
        Private columnCuentadePago3 As Global.System.Data.DataColumn
        
        Private columnFormadePago3 As Global.System.Data.DataColumn
        
        Private columnCuentadePago4 As Global.System.Data.DataColumn
        
        Private columnFormadePago4 As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnApellidoPaterno As Global.System.Data.DataColumn
        
        Private columnApellidoMaterno As Global.System.Data.DataColumn
        
        Private columnGenero As Global.System.Data.DataColumn
        
        Private columnAutoriza As Global.System.Data.DataColumn
        
        Private columnsiebel As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Clientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PromoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GestorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColoniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DelegacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelegacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CoposColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCopos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Telef1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelef1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Telef2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelef2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Telef3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelef3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Fecha1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GiroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGiro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PlazaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlaza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CURPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMail1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMail2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMail2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentaBancomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaBancomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentaCLABEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCLABE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GeneClieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneClie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NomreprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrepr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GenereprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenerepr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PodereprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoderepr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nomrepr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrepr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Generep2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenerep2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Poderep2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoderep2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CoacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipcoacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipcoac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NomcoacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomcoac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GenecoacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenecoac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NomrcoacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrcoac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GenercoaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenercoa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PodercoaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPodercoa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ObliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipoObliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoObli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NomObliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomObli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GeneObliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneObli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NomrOblColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrObl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GenerOblColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenerObl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PoderOblColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoderObl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aval1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAval1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Tipaval1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipaval1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nomaval1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomaval1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Geneava1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneava1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nomrava1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrava1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Generav1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenerav1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Poderav1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoderav1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aval2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAval2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Tipaval2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipaval2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nomaval2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomaval2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GeneAva2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneAva2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nomrava2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomrava2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Generav2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenerav2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Poderav2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoderav2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AgrupaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgrupa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SegVidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegVida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TasaIVAClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasaIVACliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentadePago1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentadePago1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FormadePago1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormadePago1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentadePago2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentadePago2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FormadePago2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormadePago2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentadePago3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentadePago3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FormadePago3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormadePago3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentadePago4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentadePago4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FormadePago4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormadePago4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ApellidoPaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApellidoPaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ApellidoMaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApellidoMaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GeneroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property siebelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsiebel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddClientesRow( _
                    ByVal Cliente As String,  _
                    ByVal Descr As String,  _
                    ByVal Tipo As String,  _
                    ByVal Sucursal As String,  _
                    ByVal Promo As String,  _
                    ByVal Gestor As String,  _
                    ByVal Calle As String,  _
                    ByVal Colonia As String,  _
                    ByVal Delegacion As String,  _
                    ByVal Copos As String,  _
                    ByVal Telef1 As String,  _
                    ByVal Telef2 As String,  _
                    ByVal Telef3 As String,  _
                    ByVal Fax As String,  _
                    ByVal Fecha1 As String,  _
                    ByVal Giro As String,  _
                    ByVal Plaza As String,  _
                    ByVal RFC As String,  _
                    ByVal CURP As String,  _
                    ByVal EMail1 As String,  _
                    ByVal EMail2 As String,  _
                    ByVal Banco As String,  _
                    ByVal CuentaBancomer As String,  _
                    ByVal CuentaCLABE As String,  _
                    ByVal GeneClie As String,  _
                    ByVal Nomrepr As String,  _
                    ByVal Generepr As String,  _
                    ByVal Poderepr As String,  _
                    ByVal Nomrepr2 As String,  _
                    ByVal Generep2 As String,  _
                    ByVal Poderep2 As String,  _
                    ByVal Coac As String,  _
                    ByVal Tipcoac As String,  _
                    ByVal Nomcoac As String,  _
                    ByVal Genecoac As String,  _
                    ByVal Nomrcoac As String,  _
                    ByVal Genercoa As String,  _
                    ByVal Podercoa As String,  _
                    ByVal Obli As String,  _
                    ByVal TipoObli As String,  _
                    ByVal NomObli As String,  _
                    ByVal GeneObli As String,  _
                    ByVal NomrObl As String,  _
                    ByVal GenerObl As String,  _
                    ByVal PoderObl As String,  _
                    ByVal Aval1 As String,  _
                    ByVal Tipaval1 As String,  _
                    ByVal Nomaval1 As String,  _
                    ByVal Geneava1 As String,  _
                    ByVal Nomrava1 As String,  _
                    ByVal Generav1 As String,  _
                    ByVal Poderav1 As String,  _
                    ByVal Aval2 As String,  _
                    ByVal Tipaval2 As String,  _
                    ByVal Nomaval2 As String,  _
                    ByVal GeneAva2 As String,  _
                    ByVal Nomrava2 As String,  _
                    ByVal Generav2 As String,  _
                    ByVal Poderav2 As String,  _
                    ByVal Agrupa As String,  _
                    ByVal SegVida As String,  _
                    ByVal TasaIVACliente As Decimal,  _
                    ByVal CuentadePago1 As String,  _
                    ByVal FormadePago1 As String,  _
                    ByVal CuentadePago2 As String,  _
                    ByVal FormadePago2 As String,  _
                    ByVal CuentadePago3 As String,  _
                    ByVal FormadePago3 As String,  _
                    ByVal CuentadePago4 As String,  _
                    ByVal FormadePago4 As String,  _
                    ByVal NombreCliente As String,  _
                    ByVal ApellidoPaterno As String,  _
                    ByVal ApellidoMaterno As String,  _
                    ByVal Genero As String,  _
                    ByVal Autoriza As String,  _
                    ByVal siebel As Boolean) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            Dim columnValuesArray() As Object = New Object() {Cliente, Descr, Tipo, Sucursal, Promo, Gestor, Calle, Colonia, Delegacion, Copos, Telef1, Telef2, Telef3, Fax, Fecha1, Giro, Plaza, RFC, CURP, EMail1, EMail2, Banco, CuentaBancomer, CuentaCLABE, GeneClie, Nomrepr, Generepr, Poderepr, Nomrepr2, Generep2, Poderep2, Coac, Tipcoac, Nomcoac, Genecoac, Nomrcoac, Genercoa, Podercoa, Obli, TipoObli, NomObli, GeneObli, NomrObl, GenerObl, PoderObl, Aval1, Tipaval1, Nomaval1, Geneava1, Nomrava1, Generav1, Poderav1, Aval2, Tipaval2, Nomaval2, GeneAva2, Nomrava2, Generav2, Poderav2, Agrupa, SegVida, TasaIVACliente, CuentadePago1, FormadePago1, CuentadePago2, FormadePago2, CuentadePago3, FormadePago3, CuentadePago4, FormadePago4, NombreCliente, ApellidoPaterno, ApellidoMaterno, Genero, Autoriza, siebel}
            rowClientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnDescr = MyBase.Columns("Descr")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnSucursal = MyBase.Columns("Sucursal")
            Me.columnPromo = MyBase.Columns("Promo")
            Me.columnGestor = MyBase.Columns("Gestor")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnColonia = MyBase.Columns("Colonia")
            Me.columnDelegacion = MyBase.Columns("Delegacion")
            Me.columnCopos = MyBase.Columns("Copos")
            Me.columnTelef1 = MyBase.Columns("Telef1")
            Me.columnTelef2 = MyBase.Columns("Telef2")
            Me.columnTelef3 = MyBase.Columns("Telef3")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnFecha1 = MyBase.Columns("Fecha1")
            Me.columnGiro = MyBase.Columns("Giro")
            Me.columnPlaza = MyBase.Columns("Plaza")
            Me.columnRFC = MyBase.Columns("RFC")
            Me.columnCURP = MyBase.Columns("CURP")
            Me.columnEMail1 = MyBase.Columns("EMail1")
            Me.columnEMail2 = MyBase.Columns("EMail2")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnCuentaBancomer = MyBase.Columns("CuentaBancomer")
            Me.columnCuentaCLABE = MyBase.Columns("CuentaCLABE")
            Me.columnGeneClie = MyBase.Columns("GeneClie")
            Me.columnNomrepr = MyBase.Columns("Nomrepr")
            Me.columnGenerepr = MyBase.Columns("Generepr")
            Me.columnPoderepr = MyBase.Columns("Poderepr")
            Me.columnNomrepr2 = MyBase.Columns("Nomrepr2")
            Me.columnGenerep2 = MyBase.Columns("Generep2")
            Me.columnPoderep2 = MyBase.Columns("Poderep2")
            Me.columnCoac = MyBase.Columns("Coac")
            Me.columnTipcoac = MyBase.Columns("Tipcoac")
            Me.columnNomcoac = MyBase.Columns("Nomcoac")
            Me.columnGenecoac = MyBase.Columns("Genecoac")
            Me.columnNomrcoac = MyBase.Columns("Nomrcoac")
            Me.columnGenercoa = MyBase.Columns("Genercoa")
            Me.columnPodercoa = MyBase.Columns("Podercoa")
            Me.columnObli = MyBase.Columns("Obli")
            Me.columnTipoObli = MyBase.Columns("TipoObli")
            Me.columnNomObli = MyBase.Columns("NomObli")
            Me.columnGeneObli = MyBase.Columns("GeneObli")
            Me.columnNomrObl = MyBase.Columns("NomrObl")
            Me.columnGenerObl = MyBase.Columns("GenerObl")
            Me.columnPoderObl = MyBase.Columns("PoderObl")
            Me.columnAval1 = MyBase.Columns("Aval1")
            Me.columnTipaval1 = MyBase.Columns("Tipaval1")
            Me.columnNomaval1 = MyBase.Columns("Nomaval1")
            Me.columnGeneava1 = MyBase.Columns("Geneava1")
            Me.columnNomrava1 = MyBase.Columns("Nomrava1")
            Me.columnGenerav1 = MyBase.Columns("Generav1")
            Me.columnPoderav1 = MyBase.Columns("Poderav1")
            Me.columnAval2 = MyBase.Columns("Aval2")
            Me.columnTipaval2 = MyBase.Columns("Tipaval2")
            Me.columnNomaval2 = MyBase.Columns("Nomaval2")
            Me.columnGeneAva2 = MyBase.Columns("GeneAva2")
            Me.columnNomrava2 = MyBase.Columns("Nomrava2")
            Me.columnGenerav2 = MyBase.Columns("Generav2")
            Me.columnPoderav2 = MyBase.Columns("Poderav2")
            Me.columnAgrupa = MyBase.Columns("Agrupa")
            Me.columnSegVida = MyBase.Columns("SegVida")
            Me.columnTasaIVACliente = MyBase.Columns("TasaIVACliente")
            Me.columnCuentadePago1 = MyBase.Columns("CuentadePago1")
            Me.columnFormadePago1 = MyBase.Columns("FormadePago1")
            Me.columnCuentadePago2 = MyBase.Columns("CuentadePago2")
            Me.columnFormadePago2 = MyBase.Columns("FormadePago2")
            Me.columnCuentadePago3 = MyBase.Columns("CuentadePago3")
            Me.columnFormadePago3 = MyBase.Columns("FormadePago3")
            Me.columnCuentadePago4 = MyBase.Columns("CuentadePago4")
            Me.columnFormadePago4 = MyBase.Columns("FormadePago4")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnApellidoPaterno = MyBase.Columns("ApellidoPaterno")
            Me.columnApellidoMaterno = MyBase.Columns("ApellidoMaterno")
            Me.columnGenero = MyBase.Columns("Genero")
            Me.columnAutoriza = MyBase.Columns("Autoriza")
            Me.columnsiebel = MyBase.Columns("siebel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnDescr = New Global.System.Data.DataColumn("Descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescr)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnSucursal = New Global.System.Data.DataColumn("Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSucursal)
            Me.columnPromo = New Global.System.Data.DataColumn("Promo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromo)
            Me.columnGestor = New Global.System.Data.DataColumn("Gestor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestor)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnColonia = New Global.System.Data.DataColumn("Colonia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia)
            Me.columnDelegacion = New Global.System.Data.DataColumn("Delegacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelegacion)
            Me.columnCopos = New Global.System.Data.DataColumn("Copos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCopos)
            Me.columnTelef1 = New Global.System.Data.DataColumn("Telef1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelef1)
            Me.columnTelef2 = New Global.System.Data.DataColumn("Telef2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelef2)
            Me.columnTelef3 = New Global.System.Data.DataColumn("Telef3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelef3)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnFecha1 = New Global.System.Data.DataColumn("Fecha1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha1)
            Me.columnGiro = New Global.System.Data.DataColumn("Giro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGiro)
            Me.columnPlaza = New Global.System.Data.DataColumn("Plaza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlaza)
            Me.columnRFC = New Global.System.Data.DataColumn("RFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFC)
            Me.columnCURP = New Global.System.Data.DataColumn("CURP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURP)
            Me.columnEMail1 = New Global.System.Data.DataColumn("EMail1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail1)
            Me.columnEMail2 = New Global.System.Data.DataColumn("EMail2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMail2)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnCuentaBancomer = New Global.System.Data.DataColumn("CuentaBancomer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaBancomer)
            Me.columnCuentaCLABE = New Global.System.Data.DataColumn("CuentaCLABE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCLABE)
            Me.columnGeneClie = New Global.System.Data.DataColumn("GeneClie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneClie)
            Me.columnNomrepr = New Global.System.Data.DataColumn("Nomrepr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrepr)
            Me.columnGenerepr = New Global.System.Data.DataColumn("Generepr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenerepr)
            Me.columnPoderepr = New Global.System.Data.DataColumn("Poderepr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoderepr)
            Me.columnNomrepr2 = New Global.System.Data.DataColumn("Nomrepr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrepr2)
            Me.columnGenerep2 = New Global.System.Data.DataColumn("Generep2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenerep2)
            Me.columnPoderep2 = New Global.System.Data.DataColumn("Poderep2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoderep2)
            Me.columnCoac = New Global.System.Data.DataColumn("Coac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoac)
            Me.columnTipcoac = New Global.System.Data.DataColumn("Tipcoac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipcoac)
            Me.columnNomcoac = New Global.System.Data.DataColumn("Nomcoac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomcoac)
            Me.columnGenecoac = New Global.System.Data.DataColumn("Genecoac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenecoac)
            Me.columnNomrcoac = New Global.System.Data.DataColumn("Nomrcoac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrcoac)
            Me.columnGenercoa = New Global.System.Data.DataColumn("Genercoa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenercoa)
            Me.columnPodercoa = New Global.System.Data.DataColumn("Podercoa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPodercoa)
            Me.columnObli = New Global.System.Data.DataColumn("Obli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObli)
            Me.columnTipoObli = New Global.System.Data.DataColumn("TipoObli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoObli)
            Me.columnNomObli = New Global.System.Data.DataColumn("NomObli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomObli)
            Me.columnGeneObli = New Global.System.Data.DataColumn("GeneObli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneObli)
            Me.columnNomrObl = New Global.System.Data.DataColumn("NomrObl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrObl)
            Me.columnGenerObl = New Global.System.Data.DataColumn("GenerObl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenerObl)
            Me.columnPoderObl = New Global.System.Data.DataColumn("PoderObl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoderObl)
            Me.columnAval1 = New Global.System.Data.DataColumn("Aval1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAval1)
            Me.columnTipaval1 = New Global.System.Data.DataColumn("Tipaval1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipaval1)
            Me.columnNomaval1 = New Global.System.Data.DataColumn("Nomaval1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomaval1)
            Me.columnGeneava1 = New Global.System.Data.DataColumn("Geneava1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneava1)
            Me.columnNomrava1 = New Global.System.Data.DataColumn("Nomrava1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrava1)
            Me.columnGenerav1 = New Global.System.Data.DataColumn("Generav1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenerav1)
            Me.columnPoderav1 = New Global.System.Data.DataColumn("Poderav1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoderav1)
            Me.columnAval2 = New Global.System.Data.DataColumn("Aval2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAval2)
            Me.columnTipaval2 = New Global.System.Data.DataColumn("Tipaval2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipaval2)
            Me.columnNomaval2 = New Global.System.Data.DataColumn("Nomaval2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomaval2)
            Me.columnGeneAva2 = New Global.System.Data.DataColumn("GeneAva2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneAva2)
            Me.columnNomrava2 = New Global.System.Data.DataColumn("Nomrava2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomrava2)
            Me.columnGenerav2 = New Global.System.Data.DataColumn("Generav2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenerav2)
            Me.columnPoderav2 = New Global.System.Data.DataColumn("Poderav2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoderav2)
            Me.columnAgrupa = New Global.System.Data.DataColumn("Agrupa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgrupa)
            Me.columnSegVida = New Global.System.Data.DataColumn("SegVida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegVida)
            Me.columnTasaIVACliente = New Global.System.Data.DataColumn("TasaIVACliente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasaIVACliente)
            Me.columnCuentadePago1 = New Global.System.Data.DataColumn("CuentadePago1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentadePago1)
            Me.columnFormadePago1 = New Global.System.Data.DataColumn("FormadePago1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormadePago1)
            Me.columnCuentadePago2 = New Global.System.Data.DataColumn("CuentadePago2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentadePago2)
            Me.columnFormadePago2 = New Global.System.Data.DataColumn("FormadePago2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormadePago2)
            Me.columnCuentadePago3 = New Global.System.Data.DataColumn("CuentadePago3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentadePago3)
            Me.columnFormadePago3 = New Global.System.Data.DataColumn("FormadePago3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormadePago3)
            Me.columnCuentadePago4 = New Global.System.Data.DataColumn("CuentadePago4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentadePago4)
            Me.columnFormadePago4 = New Global.System.Data.DataColumn("FormadePago4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormadePago4)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnApellidoPaterno = New Global.System.Data.DataColumn("ApellidoPaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApellidoPaterno)
            Me.columnApellidoMaterno = New Global.System.Data.DataColumn("ApellidoMaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApellidoMaterno)
            Me.columnGenero = New Global.System.Data.DataColumn("Genero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenero)
            Me.columnAutoriza = New Global.System.Data.DataColumn("Autoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoriza)
            Me.columnsiebel = New Global.System.Data.DataColumn("siebel", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsiebel)
            Me.columnCliente.AllowDBNull = false
            Me.columnCliente.MaxLength = 5
            Me.columnDescr.AllowDBNull = false
            Me.columnDescr.MaxLength = 120
            Me.columnTipo.AllowDBNull = false
            Me.columnTipo.MaxLength = 1
            Me.columnSucursal.MaxLength = 2
            Me.columnPromo.AllowDBNull = false
            Me.columnPromo.MaxLength = 3
            Me.columnGestor.AllowDBNull = false
            Me.columnGestor.MaxLength = 3
            Me.columnCalle.AllowDBNull = false
            Me.columnCalle.MaxLength = 120
            Me.columnColonia.AllowDBNull = false
            Me.columnColonia.MaxLength = 45
            Me.columnDelegacion.AllowDBNull = false
            Me.columnDelegacion.MaxLength = 45
            Me.columnCopos.AllowDBNull = false
            Me.columnCopos.MaxLength = 5
            Me.columnTelef1.AllowDBNull = false
            Me.columnTelef1.MaxLength = 25
            Me.columnTelef2.AllowDBNull = false
            Me.columnTelef2.MaxLength = 25
            Me.columnTelef3.AllowDBNull = false
            Me.columnTelef3.MaxLength = 25
            Me.columnFax.AllowDBNull = false
            Me.columnFax.MaxLength = 17
            Me.columnFecha1.AllowDBNull = false
            Me.columnFecha1.MaxLength = 8
            Me.columnGiro.AllowDBNull = false
            Me.columnGiro.MaxLength = 2
            Me.columnPlaza.AllowDBNull = false
            Me.columnPlaza.MaxLength = 2
            Me.columnRFC.AllowDBNull = false
            Me.columnRFC.MaxLength = 13
            Me.columnCURP.MaxLength = 18
            Me.columnEMail1.AllowDBNull = false
            Me.columnEMail1.MaxLength = 50
            Me.columnEMail2.AllowDBNull = false
            Me.columnEMail2.MaxLength = 50
            Me.columnBanco.AllowDBNull = false
            Me.columnBanco.MaxLength = 12
            Me.columnCuentaBancomer.AllowDBNull = false
            Me.columnCuentaBancomer.MaxLength = 10
            Me.columnCuentaCLABE.AllowDBNull = false
            Me.columnCuentaCLABE.MaxLength = 18
            Me.columnGeneClie.AllowDBNull = false
            Me.columnGeneClie.MaxLength = 1073741823
            Me.columnNomrepr.AllowDBNull = false
            Me.columnNomrepr.MaxLength = 150
            Me.columnGenerepr.AllowDBNull = false
            Me.columnGenerepr.MaxLength = 1073741823
            Me.columnPoderepr.AllowDBNull = false
            Me.columnPoderepr.MaxLength = 1073741823
            Me.columnNomrepr2.AllowDBNull = false
            Me.columnNomrepr2.MaxLength = 60
            Me.columnGenerep2.AllowDBNull = false
            Me.columnGenerep2.MaxLength = 1073741823
            Me.columnPoderep2.AllowDBNull = false
            Me.columnPoderep2.MaxLength = 1073741823
            Me.columnCoac.AllowDBNull = false
            Me.columnCoac.MaxLength = 1
            Me.columnTipcoac.AllowDBNull = false
            Me.columnTipcoac.MaxLength = 1
            Me.columnNomcoac.AllowDBNull = false
            Me.columnNomcoac.MaxLength = 150
            Me.columnGenecoac.AllowDBNull = false
            Me.columnGenecoac.MaxLength = 1073741823
            Me.columnNomrcoac.AllowDBNull = false
            Me.columnNomrcoac.MaxLength = 150
            Me.columnGenercoa.AllowDBNull = false
            Me.columnGenercoa.MaxLength = 1073741823
            Me.columnPodercoa.AllowDBNull = false
            Me.columnPodercoa.MaxLength = 1073741823
            Me.columnObli.AllowDBNull = false
            Me.columnObli.MaxLength = 1
            Me.columnTipoObli.AllowDBNull = false
            Me.columnTipoObli.MaxLength = 1
            Me.columnNomObli.AllowDBNull = false
            Me.columnNomObli.MaxLength = 70
            Me.columnGeneObli.AllowDBNull = false
            Me.columnGeneObli.MaxLength = 1073741823
            Me.columnNomrObl.AllowDBNull = false
            Me.columnNomrObl.MaxLength = 150
            Me.columnGenerObl.AllowDBNull = false
            Me.columnGenerObl.MaxLength = 1073741823
            Me.columnPoderObl.AllowDBNull = false
            Me.columnPoderObl.MaxLength = 1073741823
            Me.columnAval1.AllowDBNull = false
            Me.columnAval1.MaxLength = 1
            Me.columnTipaval1.AllowDBNull = false
            Me.columnTipaval1.MaxLength = 1
            Me.columnNomaval1.AllowDBNull = false
            Me.columnNomaval1.MaxLength = 150
            Me.columnGeneava1.AllowDBNull = false
            Me.columnGeneava1.MaxLength = 1073741823
            Me.columnNomrava1.AllowDBNull = false
            Me.columnNomrava1.MaxLength = 150
            Me.columnGenerav1.AllowDBNull = false
            Me.columnGenerav1.MaxLength = 1073741823
            Me.columnPoderav1.AllowDBNull = false
            Me.columnPoderav1.MaxLength = 1073741823
            Me.columnAval2.AllowDBNull = false
            Me.columnAval2.MaxLength = 1
            Me.columnTipaval2.AllowDBNull = false
            Me.columnTipaval2.MaxLength = 1
            Me.columnNomaval2.AllowDBNull = false
            Me.columnNomaval2.MaxLength = 150
            Me.columnGeneAva2.AllowDBNull = false
            Me.columnGeneAva2.MaxLength = 1073741823
            Me.columnNomrava2.AllowDBNull = false
            Me.columnNomrava2.MaxLength = 150
            Me.columnGenerav2.AllowDBNull = false
            Me.columnGenerav2.MaxLength = 1073741823
            Me.columnPoderav2.AllowDBNull = false
            Me.columnPoderav2.MaxLength = 1073741823
            Me.columnAgrupa.AllowDBNull = false
            Me.columnAgrupa.MaxLength = 5
            Me.columnSegVida.MaxLength = 1
            Me.columnTasaIVACliente.AllowDBNull = false
            Me.columnCuentadePago1.AllowDBNull = false
            Me.columnCuentadePago1.MaxLength = 4
            Me.columnFormadePago1.AllowDBNull = false
            Me.columnFormadePago1.MaxLength = 37
            Me.columnCuentadePago2.AllowDBNull = false
            Me.columnCuentadePago2.MaxLength = 4
            Me.columnFormadePago2.AllowDBNull = false
            Me.columnFormadePago2.MaxLength = 37
            Me.columnCuentadePago3.AllowDBNull = false
            Me.columnCuentadePago3.MaxLength = 4
            Me.columnFormadePago3.AllowDBNull = false
            Me.columnFormadePago3.MaxLength = 37
            Me.columnCuentadePago4.AllowDBNull = false
            Me.columnCuentadePago4.MaxLength = 4
            Me.columnFormadePago4.AllowDBNull = false
            Me.columnFormadePago4.MaxLength = 37
            Me.columnNombreCliente.AllowDBNull = false
            Me.columnNombreCliente.MaxLength = 50
            Me.columnApellidoPaterno.AllowDBNull = false
            Me.columnApellidoPaterno.MaxLength = 50
            Me.columnApellidoMaterno.AllowDBNull = false
            Me.columnApellidoMaterno.MaxLength = 50
            Me.columnGenero.AllowDBNull = false
            Me.columnGenero.MaxLength = 9
            Me.columnAutoriza.AllowDBNull = false
            Me.columnAutoriza.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AnexosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnFlcan As Global.System.Data.DataColumn
        
        Private columnVencida As Global.System.Data.DataColumn
        
        Private columnGarantia As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnImpeq As Global.System.Data.DataColumn
        
        Private columnSegeq As Global.System.Data.DataColumn
        
        Private columnFinse As Global.System.Data.DataColumn
        
        Private columnPlazo As Global.System.Data.DataColumn
        
        Private columnPlaseg As Global.System.Data.DataColumn
        
        Private columnIvaeq As Global.System.Data.DataColumn
        
        Private columnIvase As Global.System.Data.DataColumn
        
        Private columnPorieq As Global.System.Data.DataColumn
        
        Private columnPorInt As Global.System.Data.DataColumn
        
        Private columnAmorin As Global.System.Data.DataColumn
        
        Private columnIvaAmorin As Global.System.Data.DataColumn
        
        Private columnTippe As Global.System.Data.DataColumn
        
        Private columnTipta As Global.System.Data.DataColumn
        
        Private columnTasas As Global.System.Data.DataColumn
        
        Private columnAcumulaIntereses As Global.System.Data.DataColumn
        
        Private columnTipar As Global.System.Data.DataColumn
        
        Private columnForca As Global.System.Data.DataColumn
        
        Private columnTipmen As Global.System.Data.DataColumn
        
        Private columnDifer As Global.System.Data.DataColumn
        
        Private columnRtasD As Global.System.Data.DataColumn
        
        Private columnImpRD As Global.System.Data.DataColumn
        
        Private columnIvaRD As Global.System.Data.DataColumn
        
        Private columnPorco As Global.System.Data.DataColumn
        
        Private columnComis As Global.System.Data.DataColumn
        
        Private columnPorop As Global.System.Data.DataColumn
        
        Private columnFechacon As Global.System.Data.DataColumn
        
        Private columnFvenc As Global.System.Data.DataColumn
        
        Private columnFondeo As Global.System.Data.DataColumn
        
        Private columnDepNafin As Global.System.Data.DataColumn
        
        Private columnCritas As Global.System.Data.DataColumn
        
        Private columnTipeq As Global.System.Data.DataColumn
        
        Private columnGastos As Global.System.Data.DataColumn
        
        Private columnIvaGastos As Global.System.Data.DataColumn
        
        Private columnTipmon As Global.System.Data.DataColumn
        
        Private columnMensu As Global.System.Data.DataColumn
        
        Private columnTasmor As Global.System.Data.DataColumn
        
        Private columnTaspen As Global.System.Data.DataColumn
        
        Private columnDoc1 As Global.System.Data.DataColumn
        
        Private columnDoc2 As Global.System.Data.DataColumn
        
        Private columnDoc3 As Global.System.Data.DataColumn
        
        Private columnPrendaria As Global.System.Data.DataColumn
        
        Private columnPrenda As Global.System.Data.DataColumn
        
        Private columnObserva As Global.System.Data.DataColumn
        
        Private columnFechafin As Global.System.Data.DataColumn
        
        Private columnFactor As Global.System.Data.DataColumn
        
        Private columnPiso As Global.System.Data.DataColumn
        
        Private columnTecho As Global.System.Data.DataColumn
        
        Private columnTasamax As Global.System.Data.DataColumn
        
        Private columnAdeudo As Global.System.Data.DataColumn
        
        Private columnRD As Global.System.Data.DataColumn
        
        Private columnImpDG As Global.System.Data.DataColumn
        
        Private columnIvaDG As Global.System.Data.DataColumn
        
        Private columnDerechos As Global.System.Data.DataColumn
        
        Private columnDG As Global.System.Data.DataColumn
        
        Private columnGHipotec As Global.System.Data.DataColumn
        
        Private columnLugar As Global.System.Data.DataColumn
        
        Private columnNotaria As Global.System.Data.DataColumn
        
        Private columnEscritura As Global.System.Data.DataColumn
        
        Private columnScaneo As Global.System.Data.DataColumn
        
        Private columnArchivo As Global.System.Data.DataColumn
        
        Private columnServicio As Global.System.Data.DataColumn
        
        Private columnIVAServicio As Global.System.Data.DataColumn
        
        Private columnFecha_Pago As Global.System.Data.DataColumn
        
        Private columnCobertura As Global.System.Data.DataColumn
        
        Private columnPagos As Global.System.Data.DataColumn
        
        Private columnTipoFrecuencia As Global.System.Data.DataColumn
        
        Private columnValorFrecuencia As Global.System.Data.DataColumn
        
        Private columnAmortizaciones As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnCuentaCLABE As Global.System.Data.DataColumn
        
        Private columnAutoriza As Global.System.Data.DataColumn
        
        Private columnTitular As Global.System.Data.DataColumn
        
        Private columnidCredito As Global.System.Data.DataColumn
        
        Private columnMinds As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Anexos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlcanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlcan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VencidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVencida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GarantiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarantia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImpeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SegeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FinseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PlazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PlasegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlaseg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PorieqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorieq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PorIntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmorinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmorin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaAmorinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaAmorin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TippeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTippe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TiptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TasasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AcumulaInteresesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcumulaIntereses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TiparColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ForcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipmenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipmen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DiferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDifer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RtasDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRtasD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImpRDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpRD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaRDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaRD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PorcoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ComisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PoropColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaconColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechacon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FvencColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFvenc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FondeoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFondeo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DepNafinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepNafin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CritasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCritas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GastosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaGastosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaGastos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipmonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipmon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MensuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMensu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TasmorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasmor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TaspenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaspen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Doc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Doc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Doc3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrendariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrendaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrenda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ObservaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObserva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechafinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechafin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FactorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPiso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TechoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTecho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TasamaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasamax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AdeudoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdeudo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImpDGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpDG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaDGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaDG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DerechosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDerechos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GHipotecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGHipotec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EscrituraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEscritura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ScaneoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScaneo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ArchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IVAServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVAServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Fecha_PagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Pago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CoberturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCobertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TipoFrecuenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoFrecuencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValorFrecuenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorFrecuencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmortizacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmortizaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CuentaCLABEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCLABE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TitularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MindsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinds
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AnexosRow
            Get
                Return CType(Me.Rows(index),AnexosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AnexosRowChanging As AnexosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AnexosRowChanged As AnexosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AnexosRowDeleting As AnexosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AnexosRowDeleted As AnexosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAnexosRow(ByVal row As AnexosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAnexosRow( _
                    ByVal Anexo As String,  _
                    ByVal Flcan As String,  _
                    ByVal Vencida As String,  _
                    ByVal Garantia As String,  _
                    ByVal Referencia As String,  _
                    ByVal Cliente As String,  _
                    ByVal Impeq As Decimal,  _
                    ByVal Segeq As Decimal,  _
                    ByVal Finse As String,  _
                    ByVal Plazo As Byte,  _
                    ByVal Plaseg As Byte,  _
                    ByVal Ivaeq As Decimal,  _
                    ByVal Ivase As Decimal,  _
                    ByVal Porieq As Decimal,  _
                    ByVal PorInt As Decimal,  _
                    ByVal Amorin As Decimal,  _
                    ByVal IvaAmorin As Decimal,  _
                    ByVal Tippe As String,  _
                    ByVal Tipta As String,  _
                    ByVal Tasas As Decimal,  _
                    ByVal AcumulaIntereses As String,  _
                    ByVal Tipar As String,  _
                    ByVal Forca As String,  _
                    ByVal Tipmen As String,  _
                    ByVal Difer As Decimal,  _
                    ByVal RtasD As Byte,  _
                    ByVal ImpRD As Decimal,  _
                    ByVal IvaRD As Decimal,  _
                    ByVal Porco As Decimal,  _
                    ByVal Comis As Decimal,  _
                    ByVal Porop As Decimal,  _
                    ByVal Fechacon As String,  _
                    ByVal Fvenc As String,  _
                    ByVal Fondeo As String,  _
                    ByVal DepNafin As Decimal,  _
                    ByVal Critas As String,  _
                    ByVal Tipeq As String,  _
                    ByVal Gastos As Decimal,  _
                    ByVal IvaGastos As Decimal,  _
                    ByVal Tipmon As String,  _
                    ByVal Mensu As Decimal,  _
                    ByVal Tasmor As Decimal,  _
                    ByVal Taspen As Decimal,  _
                    ByVal Doc1 As String,  _
                    ByVal Doc2 As String,  _
                    ByVal Doc3 As String,  _
                    ByVal Prendaria As String,  _
                    ByVal Prenda As String,  _
                    ByVal Observa As String,  _
                    ByVal Fechafin As String,  _
                    ByVal Factor As Decimal,  _
                    ByVal Piso As Decimal,  _
                    ByVal Techo As Decimal,  _
                    ByVal Tasamax As Decimal,  _
                    ByVal Adeudo As String,  _
                    ByVal RD As Byte,  _
                    ByVal ImpDG As Decimal,  _
                    ByVal IvaDG As Decimal,  _
                    ByVal Derechos As Decimal,  _
                    ByVal DG As Byte,  _
                    ByVal GHipotec As String,  _
                    ByVal Lugar As String,  _
                    ByVal Notaria As String,  _
                    ByVal Escritura As String,  _
                    ByVal Scaneo As String,  _
                    ByVal Archivo As String,  _
                    ByVal Servicio As Decimal,  _
                    ByVal IVAServicio As Decimal,  _
                    ByVal Fecha_Pago As String,  _
                    ByVal Cobertura As String,  _
                    ByVal Pagos As Byte,  _
                    ByVal TipoFrecuencia As String,  _
                    ByVal ValorFrecuencia As Byte,  _
                    ByVal Amortizaciones As Byte,  _
                    ByVal Banco As String,  _
                    ByVal CuentaCLABE As String,  _
                    ByVal Autoriza As String,  _
                    ByVal Titular As String,  _
                    ByVal idCredito As String,  _
                    ByVal Minds As Boolean) As AnexosRow
            Dim rowAnexosRow As AnexosRow = CType(Me.NewRow,AnexosRow)
            Dim columnValuesArray() As Object = New Object() {Anexo, Flcan, Vencida, Garantia, Referencia, Cliente, Impeq, Segeq, Finse, Plazo, Plaseg, Ivaeq, Ivase, Porieq, PorInt, Amorin, IvaAmorin, Tippe, Tipta, Tasas, AcumulaIntereses, Tipar, Forca, Tipmen, Difer, RtasD, ImpRD, IvaRD, Porco, Comis, Porop, Fechacon, Fvenc, Fondeo, DepNafin, Critas, Tipeq, Gastos, IvaGastos, Tipmon, Mensu, Tasmor, Taspen, Doc1, Doc2, Doc3, Prendaria, Prenda, Observa, Fechafin, Factor, Piso, Techo, Tasamax, Adeudo, RD, ImpDG, IvaDG, Derechos, DG, GHipotec, Lugar, Notaria, Escritura, Scaneo, Archivo, Servicio, IVAServicio, Fecha_Pago, Cobertura, Pagos, TipoFrecuencia, ValorFrecuencia, Amortizaciones, Banco, CuentaCLABE, Autoriza, Titular, idCredito, Minds}
            rowAnexosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAnexosRow)
            Return rowAnexosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AnexosDataTable = CType(MyBase.Clone,AnexosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AnexosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnFlcan = MyBase.Columns("Flcan")
            Me.columnVencida = MyBase.Columns("Vencida")
            Me.columnGarantia = MyBase.Columns("Garantia")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnImpeq = MyBase.Columns("Impeq")
            Me.columnSegeq = MyBase.Columns("Segeq")
            Me.columnFinse = MyBase.Columns("Finse")
            Me.columnPlazo = MyBase.Columns("Plazo")
            Me.columnPlaseg = MyBase.Columns("Plaseg")
            Me.columnIvaeq = MyBase.Columns("Ivaeq")
            Me.columnIvase = MyBase.Columns("Ivase")
            Me.columnPorieq = MyBase.Columns("Porieq")
            Me.columnPorInt = MyBase.Columns("PorInt")
            Me.columnAmorin = MyBase.Columns("Amorin")
            Me.columnIvaAmorin = MyBase.Columns("IvaAmorin")
            Me.columnTippe = MyBase.Columns("Tippe")
            Me.columnTipta = MyBase.Columns("Tipta")
            Me.columnTasas = MyBase.Columns("Tasas")
            Me.columnAcumulaIntereses = MyBase.Columns("AcumulaIntereses")
            Me.columnTipar = MyBase.Columns("Tipar")
            Me.columnForca = MyBase.Columns("Forca")
            Me.columnTipmen = MyBase.Columns("Tipmen")
            Me.columnDifer = MyBase.Columns("Difer")
            Me.columnRtasD = MyBase.Columns("RtasD")
            Me.columnImpRD = MyBase.Columns("ImpRD")
            Me.columnIvaRD = MyBase.Columns("IvaRD")
            Me.columnPorco = MyBase.Columns("Porco")
            Me.columnComis = MyBase.Columns("Comis")
            Me.columnPorop = MyBase.Columns("Porop")
            Me.columnFechacon = MyBase.Columns("Fechacon")
            Me.columnFvenc = MyBase.Columns("Fvenc")
            Me.columnFondeo = MyBase.Columns("Fondeo")
            Me.columnDepNafin = MyBase.Columns("DepNafin")
            Me.columnCritas = MyBase.Columns("Critas")
            Me.columnTipeq = MyBase.Columns("Tipeq")
            Me.columnGastos = MyBase.Columns("Gastos")
            Me.columnIvaGastos = MyBase.Columns("IvaGastos")
            Me.columnTipmon = MyBase.Columns("Tipmon")
            Me.columnMensu = MyBase.Columns("Mensu")
            Me.columnTasmor = MyBase.Columns("Tasmor")
            Me.columnTaspen = MyBase.Columns("Taspen")
            Me.columnDoc1 = MyBase.Columns("Doc1")
            Me.columnDoc2 = MyBase.Columns("Doc2")
            Me.columnDoc3 = MyBase.Columns("Doc3")
            Me.columnPrendaria = MyBase.Columns("Prendaria")
            Me.columnPrenda = MyBase.Columns("Prenda")
            Me.columnObserva = MyBase.Columns("Observa")
            Me.columnFechafin = MyBase.Columns("Fechafin")
            Me.columnFactor = MyBase.Columns("Factor")
            Me.columnPiso = MyBase.Columns("Piso")
            Me.columnTecho = MyBase.Columns("Techo")
            Me.columnTasamax = MyBase.Columns("Tasamax")
            Me.columnAdeudo = MyBase.Columns("Adeudo")
            Me.columnRD = MyBase.Columns("RD")
            Me.columnImpDG = MyBase.Columns("ImpDG")
            Me.columnIvaDG = MyBase.Columns("IvaDG")
            Me.columnDerechos = MyBase.Columns("Derechos")
            Me.columnDG = MyBase.Columns("DG")
            Me.columnGHipotec = MyBase.Columns("GHipotec")
            Me.columnLugar = MyBase.Columns("Lugar")
            Me.columnNotaria = MyBase.Columns("Notaria")
            Me.columnEscritura = MyBase.Columns("Escritura")
            Me.columnScaneo = MyBase.Columns("Scaneo")
            Me.columnArchivo = MyBase.Columns("Archivo")
            Me.columnServicio = MyBase.Columns("Servicio")
            Me.columnIVAServicio = MyBase.Columns("IVAServicio")
            Me.columnFecha_Pago = MyBase.Columns("Fecha_Pago")
            Me.columnCobertura = MyBase.Columns("Cobertura")
            Me.columnPagos = MyBase.Columns("Pagos")
            Me.columnTipoFrecuencia = MyBase.Columns("TipoFrecuencia")
            Me.columnValorFrecuencia = MyBase.Columns("ValorFrecuencia")
            Me.columnAmortizaciones = MyBase.Columns("Amortizaciones")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnCuentaCLABE = MyBase.Columns("CuentaCLABE")
            Me.columnAutoriza = MyBase.Columns("Autoriza")
            Me.columnTitular = MyBase.Columns("Titular")
            Me.columnidCredito = MyBase.Columns("idCredito")
            Me.columnMinds = MyBase.Columns("Minds")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnFlcan = New Global.System.Data.DataColumn("Flcan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlcan)
            Me.columnVencida = New Global.System.Data.DataColumn("Vencida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVencida)
            Me.columnGarantia = New Global.System.Data.DataColumn("Garantia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarantia)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnImpeq = New Global.System.Data.DataColumn("Impeq", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpeq)
            Me.columnSegeq = New Global.System.Data.DataColumn("Segeq", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegeq)
            Me.columnFinse = New Global.System.Data.DataColumn("Finse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinse)
            Me.columnPlazo = New Global.System.Data.DataColumn("Plazo", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlazo)
            Me.columnPlaseg = New Global.System.Data.DataColumn("Plaseg", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlaseg)
            Me.columnIvaeq = New Global.System.Data.DataColumn("Ivaeq", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaeq)
            Me.columnIvase = New Global.System.Data.DataColumn("Ivase", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvase)
            Me.columnPorieq = New Global.System.Data.DataColumn("Porieq", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorieq)
            Me.columnPorInt = New Global.System.Data.DataColumn("PorInt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorInt)
            Me.columnAmorin = New Global.System.Data.DataColumn("Amorin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmorin)
            Me.columnIvaAmorin = New Global.System.Data.DataColumn("IvaAmorin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaAmorin)
            Me.columnTippe = New Global.System.Data.DataColumn("Tippe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTippe)
            Me.columnTipta = New Global.System.Data.DataColumn("Tipta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipta)
            Me.columnTasas = New Global.System.Data.DataColumn("Tasas", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasas)
            Me.columnAcumulaIntereses = New Global.System.Data.DataColumn("AcumulaIntereses", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcumulaIntereses)
            Me.columnTipar = New Global.System.Data.DataColumn("Tipar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipar)
            Me.columnForca = New Global.System.Data.DataColumn("Forca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForca)
            Me.columnTipmen = New Global.System.Data.DataColumn("Tipmen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipmen)
            Me.columnDifer = New Global.System.Data.DataColumn("Difer", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDifer)
            Me.columnRtasD = New Global.System.Data.DataColumn("RtasD", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRtasD)
            Me.columnImpRD = New Global.System.Data.DataColumn("ImpRD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpRD)
            Me.columnIvaRD = New Global.System.Data.DataColumn("IvaRD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaRD)
            Me.columnPorco = New Global.System.Data.DataColumn("Porco", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorco)
            Me.columnComis = New Global.System.Data.DataColumn("Comis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComis)
            Me.columnPorop = New Global.System.Data.DataColumn("Porop", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorop)
            Me.columnFechacon = New Global.System.Data.DataColumn("Fechacon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechacon)
            Me.columnFvenc = New Global.System.Data.DataColumn("Fvenc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFvenc)
            Me.columnFondeo = New Global.System.Data.DataColumn("Fondeo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFondeo)
            Me.columnDepNafin = New Global.System.Data.DataColumn("DepNafin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepNafin)
            Me.columnCritas = New Global.System.Data.DataColumn("Critas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCritas)
            Me.columnTipeq = New Global.System.Data.DataColumn("Tipeq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipeq)
            Me.columnGastos = New Global.System.Data.DataColumn("Gastos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastos)
            Me.columnIvaGastos = New Global.System.Data.DataColumn("IvaGastos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaGastos)
            Me.columnTipmon = New Global.System.Data.DataColumn("Tipmon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipmon)
            Me.columnMensu = New Global.System.Data.DataColumn("Mensu", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensu)
            Me.columnTasmor = New Global.System.Data.DataColumn("Tasmor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasmor)
            Me.columnTaspen = New Global.System.Data.DataColumn("Taspen", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaspen)
            Me.columnDoc1 = New Global.System.Data.DataColumn("Doc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc1)
            Me.columnDoc2 = New Global.System.Data.DataColumn("Doc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc2)
            Me.columnDoc3 = New Global.System.Data.DataColumn("Doc3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc3)
            Me.columnPrendaria = New Global.System.Data.DataColumn("Prendaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrendaria)
            Me.columnPrenda = New Global.System.Data.DataColumn("Prenda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrenda)
            Me.columnObserva = New Global.System.Data.DataColumn("Observa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObserva)
            Me.columnFechafin = New Global.System.Data.DataColumn("Fechafin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechafin)
            Me.columnFactor = New Global.System.Data.DataColumn("Factor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactor)
            Me.columnPiso = New Global.System.Data.DataColumn("Piso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPiso)
            Me.columnTecho = New Global.System.Data.DataColumn("Techo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTecho)
            Me.columnTasamax = New Global.System.Data.DataColumn("Tasamax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasamax)
            Me.columnAdeudo = New Global.System.Data.DataColumn("Adeudo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdeudo)
            Me.columnRD = New Global.System.Data.DataColumn("RD", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRD)
            Me.columnImpDG = New Global.System.Data.DataColumn("ImpDG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpDG)
            Me.columnIvaDG = New Global.System.Data.DataColumn("IvaDG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaDG)
            Me.columnDerechos = New Global.System.Data.DataColumn("Derechos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDerechos)
            Me.columnDG = New Global.System.Data.DataColumn("DG", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDG)
            Me.columnGHipotec = New Global.System.Data.DataColumn("GHipotec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGHipotec)
            Me.columnLugar = New Global.System.Data.DataColumn("Lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLugar)
            Me.columnNotaria = New Global.System.Data.DataColumn("Notaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotaria)
            Me.columnEscritura = New Global.System.Data.DataColumn("Escritura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEscritura)
            Me.columnScaneo = New Global.System.Data.DataColumn("Scaneo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScaneo)
            Me.columnArchivo = New Global.System.Data.DataColumn("Archivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchivo)
            Me.columnServicio = New Global.System.Data.DataColumn("Servicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServicio)
            Me.columnIVAServicio = New Global.System.Data.DataColumn("IVAServicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVAServicio)
            Me.columnFecha_Pago = New Global.System.Data.DataColumn("Fecha_Pago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Pago)
            Me.columnCobertura = New Global.System.Data.DataColumn("Cobertura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCobertura)
            Me.columnPagos = New Global.System.Data.DataColumn("Pagos", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagos)
            Me.columnTipoFrecuencia = New Global.System.Data.DataColumn("TipoFrecuencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFrecuencia)
            Me.columnValorFrecuencia = New Global.System.Data.DataColumn("ValorFrecuencia", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorFrecuencia)
            Me.columnAmortizaciones = New Global.System.Data.DataColumn("Amortizaciones", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmortizaciones)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnCuentaCLABE = New Global.System.Data.DataColumn("CuentaCLABE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCLABE)
            Me.columnAutoriza = New Global.System.Data.DataColumn("Autoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoriza)
            Me.columnTitular = New Global.System.Data.DataColumn("Titular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitular)
            Me.columnidCredito = New Global.System.Data.DataColumn("idCredito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidCredito)
            Me.columnMinds = New Global.System.Data.DataColumn("Minds", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinds)
            Me.columnAnexo.AllowDBNull = false
            Me.columnAnexo.MaxLength = 9
            Me.columnFlcan.AllowDBNull = false
            Me.columnFlcan.MaxLength = 1
            Me.columnVencida.AllowDBNull = false
            Me.columnVencida.MaxLength = 1
            Me.columnGarantia.AllowDBNull = false
            Me.columnGarantia.MaxLength = 3
            Me.columnReferencia.AllowDBNull = false
            Me.columnReferencia.MaxLength = 1
            Me.columnCliente.AllowDBNull = false
            Me.columnCliente.MaxLength = 5
            Me.columnImpeq.AllowDBNull = false
            Me.columnSegeq.AllowDBNull = false
            Me.columnFinse.AllowDBNull = false
            Me.columnFinse.MaxLength = 1
            Me.columnPlazo.AllowDBNull = false
            Me.columnPlaseg.AllowDBNull = false
            Me.columnIvaeq.AllowDBNull = false
            Me.columnIvase.AllowDBNull = false
            Me.columnPorieq.AllowDBNull = false
            Me.columnPorInt.AllowDBNull = false
            Me.columnAmorin.AllowDBNull = false
            Me.columnIvaAmorin.AllowDBNull = false
            Me.columnTippe.AllowDBNull = false
            Me.columnTippe.MaxLength = 2
            Me.columnTipta.AllowDBNull = false
            Me.columnTipta.MaxLength = 1
            Me.columnTasas.AllowDBNull = false
            Me.columnAcumulaIntereses.AllowDBNull = false
            Me.columnAcumulaIntereses.MaxLength = 2
            Me.columnTipar.AllowDBNull = false
            Me.columnTipar.MaxLength = 1
            Me.columnForca.AllowDBNull = false
            Me.columnForca.MaxLength = 1
            Me.columnTipmen.AllowDBNull = false
            Me.columnTipmen.MaxLength = 1
            Me.columnDifer.AllowDBNull = false
            Me.columnRtasD.AllowDBNull = false
            Me.columnImpRD.AllowDBNull = false
            Me.columnIvaRD.AllowDBNull = false
            Me.columnPorco.AllowDBNull = false
            Me.columnComis.AllowDBNull = false
            Me.columnPorop.AllowDBNull = false
            Me.columnFechacon.AllowDBNull = false
            Me.columnFechacon.MaxLength = 8
            Me.columnFvenc.AllowDBNull = false
            Me.columnFvenc.MaxLength = 8
            Me.columnFondeo.AllowDBNull = false
            Me.columnFondeo.MaxLength = 2
            Me.columnDepNafin.AllowDBNull = false
            Me.columnCritas.AllowDBNull = false
            Me.columnCritas.MaxLength = 2
            Me.columnTipeq.AllowDBNull = false
            Me.columnTipeq.MaxLength = 1
            Me.columnGastos.AllowDBNull = false
            Me.columnIvaGastos.AllowDBNull = false
            Me.columnTipmon.AllowDBNull = false
            Me.columnTipmon.MaxLength = 2
            Me.columnMensu.AllowDBNull = false
            Me.columnTasmor.AllowDBNull = false
            Me.columnTaspen.AllowDBNull = false
            Me.columnDoc1.AllowDBNull = false
            Me.columnDoc1.MaxLength = 1
            Me.columnDoc2.AllowDBNull = false
            Me.columnDoc2.MaxLength = 1
            Me.columnDoc3.AllowDBNull = false
            Me.columnDoc3.MaxLength = 1
            Me.columnPrendaria.AllowDBNull = false
            Me.columnPrendaria.MaxLength = 1
            Me.columnPrenda.AllowDBNull = false
            Me.columnPrenda.MaxLength = 1
            Me.columnObserva.AllowDBNull = false
            Me.columnObserva.MaxLength = 60
            Me.columnFechafin.AllowDBNull = false
            Me.columnFechafin.MaxLength = 8
            Me.columnFactor.AllowDBNull = false
            Me.columnPiso.AllowDBNull = false
            Me.columnTecho.AllowDBNull = false
            Me.columnTasamax.AllowDBNull = false
            Me.columnAdeudo.AllowDBNull = false
            Me.columnAdeudo.MaxLength = 1
            Me.columnRD.AllowDBNull = false
            Me.columnImpDG.AllowDBNull = false
            Me.columnIvaDG.AllowDBNull = false
            Me.columnDerechos.AllowDBNull = false
            Me.columnDG.AllowDBNull = false
            Me.columnGHipotec.AllowDBNull = false
            Me.columnGHipotec.MaxLength = 1
            Me.columnLugar.AllowDBNull = false
            Me.columnLugar.MaxLength = 30
            Me.columnNotaria.AllowDBNull = false
            Me.columnNotaria.MaxLength = 30
            Me.columnEscritura.AllowDBNull = false
            Me.columnEscritura.MaxLength = 30
            Me.columnScaneo.AllowDBNull = false
            Me.columnScaneo.MaxLength = 1
            Me.columnArchivo.AllowDBNull = false
            Me.columnArchivo.MaxLength = 30
            Me.columnServicio.AllowDBNull = false
            Me.columnIVAServicio.AllowDBNull = false
            Me.columnFecha_Pago.AllowDBNull = false
            Me.columnFecha_Pago.MaxLength = 8
            Me.columnCobertura.AllowDBNull = false
            Me.columnCobertura.MaxLength = 1
            Me.columnPagos.AllowDBNull = false
            Me.columnTipoFrecuencia.AllowDBNull = false
            Me.columnTipoFrecuencia.MaxLength = 5
            Me.columnValorFrecuencia.AllowDBNull = false
            Me.columnAmortizaciones.AllowDBNull = false
            Me.columnBanco.AllowDBNull = false
            Me.columnBanco.MaxLength = 16
            Me.columnCuentaCLABE.AllowDBNull = false
            Me.columnCuentaCLABE.MaxLength = 18
            Me.columnAutoriza.AllowDBNull = false
            Me.columnAutoriza.MaxLength = 1
            Me.columnTitular.AllowDBNull = false
            Me.columnTitular.MaxLength = 45
            Me.columnidCredito.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAnexosRow() As AnexosRow
            Return CType(Me.NewRow,AnexosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AnexosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AnexosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AnexosRowChangedEvent) Is Nothing) Then
                RaiseEvent AnexosRowChanged(Me, New AnexosRowChangeEvent(CType(e.Row,AnexosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AnexosRowChangingEvent) Is Nothing) Then
                RaiseEvent AnexosRowChanging(Me, New AnexosRowChangeEvent(CType(e.Row,AnexosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AnexosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AnexosRowDeleted(Me, New AnexosRowChangeEvent(CType(e.Row,AnexosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AnexosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AnexosRowDeleting(Me, New AnexosRowChangeEvent(CType(e.Row,AnexosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAnexosRow(ByVal row As AnexosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AnexosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AviosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnCiclo As Global.System.Data.DataColumn
        
        Private columnFlcan As Global.System.Data.DataColumn
        
        Private columnIDCredito As Global.System.Data.DataColumn
        
        Private columnTipar As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnIDPersona As Global.System.Data.DataColumn
        
        Private columnIDDTU As Global.System.Data.DataColumn
        
        Private columnIDContrato As Global.System.Data.DataColumn
        
        Private columnEstratoActual As Global.System.Data.DataColumn
        
        Private columnSustraeActual As Global.System.Data.DataColumn
        
        Private columnFechaConsulta As Global.System.Data.DataColumn
        
        Private columnFechaAutorizacion As Global.System.Data.DataColumn
        
        Private columnFechaTerminacion As Global.System.Data.DataColumn
        
        Private columnGarantiaPrendaria As Global.System.Data.DataColumn
        
        Private columnGarantiaHipotecaria As Global.System.Data.DataColumn
        
        Private columnGarantiaUsufructo As Global.System.Data.DataColumn
        
        Private columnLineaActual As Global.System.Data.DataColumn
        
        Private columnHectareasActual As Global.System.Data.DataColumn
        
        Private columnTipta As Global.System.Data.DataColumn
        
        Private columnTasas As Global.System.Data.DataColumn
        
        Private columnDiferencialFINAGIL As Global.System.Data.DataColumn
        
        Private columnDiferencialFIRA As Global.System.Data.DataColumn
        
        Private columnCostoHectarea As Global.System.Data.DataColumn
        
        Private columnPrecioTonelada As Global.System.Data.DataColumn
        
        Private columnToneladasHectarea As Global.System.Data.DataColumn
        
        Private columnVerificado As Global.System.Data.DataColumn
        
        Private columnPredios As Global.System.Data.DataColumn
        
        Private columnMuebles As Global.System.Data.DataColumn
        
        Private columnInmuebles As Global.System.Data.DataColumn
        
        Private columnUsufructo As Global.System.Data.DataColumn
        
        Private columnSemilla As Global.System.Data.DataColumn
        
        Private columnUltimoCorte As Global.System.Data.DataColumn
        
        Private columnParafin As Global.System.Data.DataColumn
        
        Private columnFechaLimiteDTC As Global.System.Data.DataColumn
        
        Private columnFechaContrato As Global.System.Data.DataColumn
        
        Private columnFechaSiembrai As Global.System.Data.DataColumn
        
        Private columnFechaSiembraf As Global.System.Data.DataColumn
        
        Private columnFechaCosechai As Global.System.Data.DataColumn
        
        Private columnFechaCosechaf As Global.System.Data.DataColumn
        
        Private columnPorcomi As Global.System.Data.DataColumn
        
        Private columnFechaTermino2 As Global.System.Data.DataColumn
        
        Private columnFechaTermino3 As Global.System.Data.DataColumn
        
        Private columnSegundoCiclo As Global.System.Data.DataColumn
        
        Private columnTercerCiclo As Global.System.Data.DataColumn
        
        Private columnFechaSiembra2 As Global.System.Data.DataColumn
        
        Private columnFechaSiembra3 As Global.System.Data.DataColumn
        
        Private columnFechaCosecha2 As Global.System.Data.DataColumn
        
        Private columnFechaCosecha3 As Global.System.Data.DataColumn
        
        Private columnFechaLimiteDTC2 As Global.System.Data.DataColumn
        
        Private columnFechaLimiteDTC3 As Global.System.Data.DataColumn
        
        Private columnCostoMaxHa As Global.System.Data.DataColumn
        
        Private columnLineaMax As Global.System.Data.DataColumn
        
        Private columnGaranteHip As Global.System.Data.DataColumn
        
        Private columnGarantePre As Global.System.Data.DataColumn
        
        Private columnFondeo As Global.System.Data.DataColumn
        
        Private columnMinds As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Avios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlcanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlcan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TiparColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDDTUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDDTU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstratoActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstratoActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SustraeActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSustraeActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaConsultaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaConsulta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaAutorizacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAutorizacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaTerminacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaTerminacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GarantiaPrendariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarantiaPrendaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GarantiaHipotecariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarantiaHipotecaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GarantiaUsufructoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarantiaUsufructo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LineaActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineaActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HectareasActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHectareasActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TiptaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TasasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DiferencialFINAGILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencialFINAGIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DiferencialFIRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencialFIRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostoHectareaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoHectarea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrecioToneladaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioTonelada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ToneladasHectareaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToneladasHectarea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VerificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrediosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPredios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MueblesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMuebles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InmueblesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInmuebles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UsufructoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsufructo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SemillaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemilla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UltimoCorteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltimoCorte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ParafinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParafin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaLimiteDTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaLimiteDTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaSiembraiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaSiembrai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaSiembrafColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaSiembraf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaCosechaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCosechai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaCosechafColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCosechaf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PorcomiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcomi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaTermino2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaTermino2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaTermino3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaTermino3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SegundoCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSegundoCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TercerCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTercerCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaSiembra2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaSiembra2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaSiembra3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaSiembra3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaCosecha2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCosecha2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaCosecha3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCosecha3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaLimiteDTC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaLimiteDTC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaLimiteDTC3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaLimiteDTC3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CostoMaxHaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoMaxHa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LineaMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineaMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GaranteHipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGaranteHip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GarantePreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarantePre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FondeoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFondeo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MindsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinds
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AviosRow
            Get
                Return CType(Me.Rows(index),AviosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AviosRowChanging As AviosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AviosRowChanged As AviosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AviosRowDeleting As AviosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AviosRowDeleted As AviosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAviosRow(ByVal row As AviosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAviosRow( _
                    ByVal Anexo As String,  _
                    ByVal Ciclo As String,  _
                    ByVal Flcan As String,  _
                    ByVal IDCredito As String,  _
                    ByVal Tipar As String,  _
                    ByVal Cliente As String,  _
                    ByVal IDPersona As String,  _
                    ByVal IDDTU As String,  _
                    ByVal IDContrato As String,  _
                    ByVal EstratoActual As String,  _
                    ByVal SustraeActual As String,  _
                    ByVal FechaConsulta As String,  _
                    ByVal FechaAutorizacion As String,  _
                    ByVal FechaTerminacion As String,  _
                    ByVal GarantiaPrendaria As String,  _
                    ByVal GarantiaHipotecaria As String,  _
                    ByVal GarantiaUsufructo As String,  _
                    ByVal LineaActual As Decimal,  _
                    ByVal HectareasActual As Decimal,  _
                    ByVal Tipta As String,  _
                    ByVal Tasas As Decimal,  _
                    ByVal DiferencialFINAGIL As Decimal,  _
                    ByVal DiferencialFIRA As Decimal,  _
                    ByVal CostoHectarea As Decimal,  _
                    ByVal PrecioTonelada As Decimal,  _
                    ByVal ToneladasHectarea As Decimal,  _
                    ByVal Verificado As String,  _
                    ByVal Predios As String,  _
                    ByVal Muebles As String,  _
                    ByVal Inmuebles As String,  _
                    ByVal Usufructo As String,  _
                    ByVal Semilla As String,  _
                    ByVal UltimoCorte As String,  _
                    ByVal Parafin As String,  _
                    ByVal FechaLimiteDTC As String,  _
                    ByVal FechaContrato As String,  _
                    ByVal FechaSiembrai As String,  _
                    ByVal FechaSiembraf As String,  _
                    ByVal FechaCosechai As String,  _
                    ByVal FechaCosechaf As String,  _
                    ByVal Porcomi As Decimal,  _
                    ByVal FechaTermino2 As String,  _
                    ByVal FechaTermino3 As String,  _
                    ByVal SegundoCiclo As String,  _
                    ByVal TercerCiclo As String,  _
                    ByVal FechaSiembra2 As String,  _
                    ByVal FechaSiembra3 As String,  _
                    ByVal FechaCosecha2 As String,  _
                    ByVal FechaCosecha3 As String,  _
                    ByVal FechaLimiteDTC2 As String,  _
                    ByVal FechaLimiteDTC3 As String,  _
                    ByVal CostoMaxHa As Decimal,  _
                    ByVal LineaMax As Decimal,  _
                    ByVal GaranteHip As String,  _
                    ByVal GarantePre As String,  _
                    ByVal Fondeo As String,  _
                    ByVal Minds As Boolean) As AviosRow
            Dim rowAviosRow As AviosRow = CType(Me.NewRow,AviosRow)
            Dim columnValuesArray() As Object = New Object() {Anexo, Ciclo, Flcan, IDCredito, Tipar, Cliente, IDPersona, IDDTU, IDContrato, EstratoActual, SustraeActual, FechaConsulta, FechaAutorizacion, FechaTerminacion, GarantiaPrendaria, GarantiaHipotecaria, GarantiaUsufructo, LineaActual, HectareasActual, Tipta, Tasas, DiferencialFINAGIL, DiferencialFIRA, CostoHectarea, PrecioTonelada, ToneladasHectarea, Verificado, Predios, Muebles, Inmuebles, Usufructo, Semilla, UltimoCorte, Parafin, FechaLimiteDTC, FechaContrato, FechaSiembrai, FechaSiembraf, FechaCosechai, FechaCosechaf, Porcomi, FechaTermino2, FechaTermino3, SegundoCiclo, TercerCiclo, FechaSiembra2, FechaSiembra3, FechaCosecha2, FechaCosecha3, FechaLimiteDTC2, FechaLimiteDTC3, CostoMaxHa, LineaMax, GaranteHip, GarantePre, Fondeo, Minds}
            rowAviosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAviosRow)
            Return rowAviosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AviosDataTable = CType(MyBase.Clone,AviosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AviosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnCiclo = MyBase.Columns("Ciclo")
            Me.columnFlcan = MyBase.Columns("Flcan")
            Me.columnIDCredito = MyBase.Columns("IDCredito")
            Me.columnTipar = MyBase.Columns("Tipar")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnIDPersona = MyBase.Columns("IDPersona")
            Me.columnIDDTU = MyBase.Columns("IDDTU")
            Me.columnIDContrato = MyBase.Columns("IDContrato")
            Me.columnEstratoActual = MyBase.Columns("EstratoActual")
            Me.columnSustraeActual = MyBase.Columns("SustraeActual")
            Me.columnFechaConsulta = MyBase.Columns("FechaConsulta")
            Me.columnFechaAutorizacion = MyBase.Columns("FechaAutorizacion")
            Me.columnFechaTerminacion = MyBase.Columns("FechaTerminacion")
            Me.columnGarantiaPrendaria = MyBase.Columns("GarantiaPrendaria")
            Me.columnGarantiaHipotecaria = MyBase.Columns("GarantiaHipotecaria")
            Me.columnGarantiaUsufructo = MyBase.Columns("GarantiaUsufructo")
            Me.columnLineaActual = MyBase.Columns("LineaActual")
            Me.columnHectareasActual = MyBase.Columns("HectareasActual")
            Me.columnTipta = MyBase.Columns("Tipta")
            Me.columnTasas = MyBase.Columns("Tasas")
            Me.columnDiferencialFINAGIL = MyBase.Columns("DiferencialFINAGIL")
            Me.columnDiferencialFIRA = MyBase.Columns("DiferencialFIRA")
            Me.columnCostoHectarea = MyBase.Columns("CostoHectarea")
            Me.columnPrecioTonelada = MyBase.Columns("PrecioTonelada")
            Me.columnToneladasHectarea = MyBase.Columns("ToneladasHectarea")
            Me.columnVerificado = MyBase.Columns("Verificado")
            Me.columnPredios = MyBase.Columns("Predios")
            Me.columnMuebles = MyBase.Columns("Muebles")
            Me.columnInmuebles = MyBase.Columns("Inmuebles")
            Me.columnUsufructo = MyBase.Columns("Usufructo")
            Me.columnSemilla = MyBase.Columns("Semilla")
            Me.columnUltimoCorte = MyBase.Columns("UltimoCorte")
            Me.columnParafin = MyBase.Columns("Parafin")
            Me.columnFechaLimiteDTC = MyBase.Columns("FechaLimiteDTC")
            Me.columnFechaContrato = MyBase.Columns("FechaContrato")
            Me.columnFechaSiembrai = MyBase.Columns("FechaSiembrai")
            Me.columnFechaSiembraf = MyBase.Columns("FechaSiembraf")
            Me.columnFechaCosechai = MyBase.Columns("FechaCosechai")
            Me.columnFechaCosechaf = MyBase.Columns("FechaCosechaf")
            Me.columnPorcomi = MyBase.Columns("Porcomi")
            Me.columnFechaTermino2 = MyBase.Columns("FechaTermino2")
            Me.columnFechaTermino3 = MyBase.Columns("FechaTermino3")
            Me.columnSegundoCiclo = MyBase.Columns("SegundoCiclo")
            Me.columnTercerCiclo = MyBase.Columns("TercerCiclo")
            Me.columnFechaSiembra2 = MyBase.Columns("FechaSiembra2")
            Me.columnFechaSiembra3 = MyBase.Columns("FechaSiembra3")
            Me.columnFechaCosecha2 = MyBase.Columns("FechaCosecha2")
            Me.columnFechaCosecha3 = MyBase.Columns("FechaCosecha3")
            Me.columnFechaLimiteDTC2 = MyBase.Columns("FechaLimiteDTC2")
            Me.columnFechaLimiteDTC3 = MyBase.Columns("FechaLimiteDTC3")
            Me.columnCostoMaxHa = MyBase.Columns("CostoMaxHa")
            Me.columnLineaMax = MyBase.Columns("LineaMax")
            Me.columnGaranteHip = MyBase.Columns("GaranteHip")
            Me.columnGarantePre = MyBase.Columns("GarantePre")
            Me.columnFondeo = MyBase.Columns("Fondeo")
            Me.columnMinds = MyBase.Columns("Minds")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnCiclo = New Global.System.Data.DataColumn("Ciclo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiclo)
            Me.columnFlcan = New Global.System.Data.DataColumn("Flcan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlcan)
            Me.columnIDCredito = New Global.System.Data.DataColumn("IDCredito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDCredito)
            Me.columnTipar = New Global.System.Data.DataColumn("Tipar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipar)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnIDPersona = New Global.System.Data.DataColumn("IDPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDPersona)
            Me.columnIDDTU = New Global.System.Data.DataColumn("IDDTU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDDTU)
            Me.columnIDContrato = New Global.System.Data.DataColumn("IDContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDContrato)
            Me.columnEstratoActual = New Global.System.Data.DataColumn("EstratoActual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstratoActual)
            Me.columnSustraeActual = New Global.System.Data.DataColumn("SustraeActual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSustraeActual)
            Me.columnFechaConsulta = New Global.System.Data.DataColumn("FechaConsulta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaConsulta)
            Me.columnFechaAutorizacion = New Global.System.Data.DataColumn("FechaAutorizacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAutorizacion)
            Me.columnFechaTerminacion = New Global.System.Data.DataColumn("FechaTerminacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaTerminacion)
            Me.columnGarantiaPrendaria = New Global.System.Data.DataColumn("GarantiaPrendaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarantiaPrendaria)
            Me.columnGarantiaHipotecaria = New Global.System.Data.DataColumn("GarantiaHipotecaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarantiaHipotecaria)
            Me.columnGarantiaUsufructo = New Global.System.Data.DataColumn("GarantiaUsufructo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarantiaUsufructo)
            Me.columnLineaActual = New Global.System.Data.DataColumn("LineaActual", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineaActual)
            Me.columnHectareasActual = New Global.System.Data.DataColumn("HectareasActual", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHectareasActual)
            Me.columnTipta = New Global.System.Data.DataColumn("Tipta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipta)
            Me.columnTasas = New Global.System.Data.DataColumn("Tasas", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasas)
            Me.columnDiferencialFINAGIL = New Global.System.Data.DataColumn("DiferencialFINAGIL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencialFINAGIL)
            Me.columnDiferencialFIRA = New Global.System.Data.DataColumn("DiferencialFIRA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencialFIRA)
            Me.columnCostoHectarea = New Global.System.Data.DataColumn("CostoHectarea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoHectarea)
            Me.columnPrecioTonelada = New Global.System.Data.DataColumn("PrecioTonelada", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioTonelada)
            Me.columnToneladasHectarea = New Global.System.Data.DataColumn("ToneladasHectarea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToneladasHectarea)
            Me.columnVerificado = New Global.System.Data.DataColumn("Verificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerificado)
            Me.columnPredios = New Global.System.Data.DataColumn("Predios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPredios)
            Me.columnMuebles = New Global.System.Data.DataColumn("Muebles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMuebles)
            Me.columnInmuebles = New Global.System.Data.DataColumn("Inmuebles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInmuebles)
            Me.columnUsufructo = New Global.System.Data.DataColumn("Usufructo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsufructo)
            Me.columnSemilla = New Global.System.Data.DataColumn("Semilla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemilla)
            Me.columnUltimoCorte = New Global.System.Data.DataColumn("UltimoCorte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltimoCorte)
            Me.columnParafin = New Global.System.Data.DataColumn("Parafin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParafin)
            Me.columnFechaLimiteDTC = New Global.System.Data.DataColumn("FechaLimiteDTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaLimiteDTC)
            Me.columnFechaContrato = New Global.System.Data.DataColumn("FechaContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaContrato)
            Me.columnFechaSiembrai = New Global.System.Data.DataColumn("FechaSiembrai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaSiembrai)
            Me.columnFechaSiembraf = New Global.System.Data.DataColumn("FechaSiembraf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaSiembraf)
            Me.columnFechaCosechai = New Global.System.Data.DataColumn("FechaCosechai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCosechai)
            Me.columnFechaCosechaf = New Global.System.Data.DataColumn("FechaCosechaf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCosechaf)
            Me.columnPorcomi = New Global.System.Data.DataColumn("Porcomi", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcomi)
            Me.columnFechaTermino2 = New Global.System.Data.DataColumn("FechaTermino2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaTermino2)
            Me.columnFechaTermino3 = New Global.System.Data.DataColumn("FechaTermino3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaTermino3)
            Me.columnSegundoCiclo = New Global.System.Data.DataColumn("SegundoCiclo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSegundoCiclo)
            Me.columnTercerCiclo = New Global.System.Data.DataColumn("TercerCiclo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTercerCiclo)
            Me.columnFechaSiembra2 = New Global.System.Data.DataColumn("FechaSiembra2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaSiembra2)
            Me.columnFechaSiembra3 = New Global.System.Data.DataColumn("FechaSiembra3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaSiembra3)
            Me.columnFechaCosecha2 = New Global.System.Data.DataColumn("FechaCosecha2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCosecha2)
            Me.columnFechaCosecha3 = New Global.System.Data.DataColumn("FechaCosecha3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCosecha3)
            Me.columnFechaLimiteDTC2 = New Global.System.Data.DataColumn("FechaLimiteDTC2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaLimiteDTC2)
            Me.columnFechaLimiteDTC3 = New Global.System.Data.DataColumn("FechaLimiteDTC3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaLimiteDTC3)
            Me.columnCostoMaxHa = New Global.System.Data.DataColumn("CostoMaxHa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoMaxHa)
            Me.columnLineaMax = New Global.System.Data.DataColumn("LineaMax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineaMax)
            Me.columnGaranteHip = New Global.System.Data.DataColumn("GaranteHip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGaranteHip)
            Me.columnGarantePre = New Global.System.Data.DataColumn("GarantePre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarantePre)
            Me.columnFondeo = New Global.System.Data.DataColumn("Fondeo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFondeo)
            Me.columnMinds = New Global.System.Data.DataColumn("Minds", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinds)
            Me.columnAnexo.AllowDBNull = false
            Me.columnAnexo.MaxLength = 9
            Me.columnCiclo.AllowDBNull = false
            Me.columnCiclo.MaxLength = 2
            Me.columnFlcan.AllowDBNull = false
            Me.columnFlcan.MaxLength = 1
            Me.columnIDCredito.AllowDBNull = false
            Me.columnIDCredito.MaxLength = 7
            Me.columnTipar.AllowDBNull = false
            Me.columnTipar.MaxLength = 1
            Me.columnCliente.AllowDBNull = false
            Me.columnCliente.MaxLength = 5
            Me.columnIDPersona.AllowDBNull = false
            Me.columnIDPersona.MaxLength = 8
            Me.columnIDDTU.AllowDBNull = false
            Me.columnIDDTU.MaxLength = 8
            Me.columnIDContrato.AllowDBNull = false
            Me.columnIDContrato.MaxLength = 8
            Me.columnEstratoActual.AllowDBNull = false
            Me.columnEstratoActual.MaxLength = 3
            Me.columnSustraeActual.AllowDBNull = false
            Me.columnSustraeActual.MaxLength = 2
            Me.columnFechaConsulta.AllowDBNull = false
            Me.columnFechaConsulta.MaxLength = 8
            Me.columnFechaAutorizacion.AllowDBNull = false
            Me.columnFechaAutorizacion.MaxLength = 8
            Me.columnFechaTerminacion.AllowDBNull = false
            Me.columnFechaTerminacion.MaxLength = 8
            Me.columnGarantiaPrendaria.AllowDBNull = false
            Me.columnGarantiaPrendaria.MaxLength = 2
            Me.columnGarantiaHipotecaria.AllowDBNull = false
            Me.columnGarantiaHipotecaria.MaxLength = 2
            Me.columnGarantiaUsufructo.AllowDBNull = false
            Me.columnGarantiaUsufructo.MaxLength = 2
            Me.columnLineaActual.AllowDBNull = false
            Me.columnHectareasActual.AllowDBNull = false
            Me.columnTipta.AllowDBNull = false
            Me.columnTipta.MaxLength = 1
            Me.columnTasas.AllowDBNull = false
            Me.columnDiferencialFINAGIL.AllowDBNull = false
            Me.columnDiferencialFIRA.AllowDBNull = false
            Me.columnCostoHectarea.AllowDBNull = false
            Me.columnPrecioTonelada.AllowDBNull = false
            Me.columnToneladasHectarea.AllowDBNull = false
            Me.columnVerificado.AllowDBNull = false
            Me.columnVerificado.MaxLength = 1
            Me.columnPredios.AllowDBNull = false
            Me.columnPredios.MaxLength = 1073741823
            Me.columnMuebles.AllowDBNull = false
            Me.columnMuebles.MaxLength = 1073741823
            Me.columnInmuebles.AllowDBNull = false
            Me.columnInmuebles.MaxLength = 1073741823
            Me.columnUsufructo.AllowDBNull = false
            Me.columnUsufructo.MaxLength = 1073741823
            Me.columnSemilla.AllowDBNull = false
            Me.columnSemilla.MaxLength = 1
            Me.columnUltimoCorte.AllowDBNull = false
            Me.columnUltimoCorte.MaxLength = 8
            Me.columnParafin.AllowDBNull = false
            Me.columnParafin.MaxLength = 1
            Me.columnFechaLimiteDTC.AllowDBNull = false
            Me.columnFechaLimiteDTC.MaxLength = 8
            Me.columnFechaContrato.AllowDBNull = false
            Me.columnFechaContrato.MaxLength = 8
            Me.columnFechaSiembrai.AllowDBNull = false
            Me.columnFechaSiembrai.MaxLength = 8
            Me.columnFechaSiembraf.AllowDBNull = false
            Me.columnFechaSiembraf.MaxLength = 8
            Me.columnFechaCosechai.AllowDBNull = false
            Me.columnFechaCosechai.MaxLength = 8
            Me.columnFechaCosechaf.AllowDBNull = false
            Me.columnFechaCosechaf.MaxLength = 8
            Me.columnPorcomi.AllowDBNull = false
            Me.columnFechaTermino2.AllowDBNull = false
            Me.columnFechaTermino2.MaxLength = 8
            Me.columnFechaTermino3.AllowDBNull = false
            Me.columnFechaTermino3.MaxLength = 8
            Me.columnSegundoCiclo.AllowDBNull = false
            Me.columnSegundoCiclo.MaxLength = 9
            Me.columnTercerCiclo.AllowDBNull = false
            Me.columnTercerCiclo.MaxLength = 9
            Me.columnFechaSiembra2.AllowDBNull = false
            Me.columnFechaSiembra2.MaxLength = 60
            Me.columnFechaSiembra3.AllowDBNull = false
            Me.columnFechaSiembra3.MaxLength = 60
            Me.columnFechaCosecha2.AllowDBNull = false
            Me.columnFechaCosecha2.MaxLength = 60
            Me.columnFechaCosecha3.AllowDBNull = false
            Me.columnFechaCosecha3.MaxLength = 60
            Me.columnFechaLimiteDTC2.AllowDBNull = false
            Me.columnFechaLimiteDTC2.MaxLength = 8
            Me.columnFechaLimiteDTC3.AllowDBNull = false
            Me.columnFechaLimiteDTC3.MaxLength = 8
            Me.columnCostoMaxHa.AllowDBNull = false
            Me.columnLineaMax.AllowDBNull = false
            Me.columnGaranteHip.AllowDBNull = false
            Me.columnGaranteHip.MaxLength = 250
            Me.columnGarantePre.AllowDBNull = false
            Me.columnGarantePre.MaxLength = 250
            Me.columnFondeo.AllowDBNull = false
            Me.columnFondeo.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAviosRow() As AviosRow
            Return CType(Me.NewRow,AviosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AviosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AviosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AviosRowChangedEvent) Is Nothing) Then
                RaiseEvent AviosRowChanged(Me, New AviosRowChangeEvent(CType(e.Row,AviosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AviosRowChangingEvent) Is Nothing) Then
                RaiseEvent AviosRowChanging(Me, New AviosRowChangeEvent(CType(e.Row,AviosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AviosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AviosRowDeleted(Me, New AviosRowChangeEvent(CType(e.Row,AviosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AviosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AviosRowDeleting(Me, New AviosRowChangeEvent(CType(e.Row,AviosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAviosRow(ByVal row As AviosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AviosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Vw_MAXfecVenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnFeven As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Vw_MAXfecVen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FevenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeven
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Vw_MAXfecVenRow
            Get
                Return CType(Me.Rows(index),Vw_MAXfecVenRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Vw_MAXfecVenRowChanging As Vw_MAXfecVenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Vw_MAXfecVenRowChanged As Vw_MAXfecVenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Vw_MAXfecVenRowDeleting As Vw_MAXfecVenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Vw_MAXfecVenRowDeleted As Vw_MAXfecVenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVw_MAXfecVenRow(ByVal row As Vw_MAXfecVenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVw_MAXfecVenRow(ByVal Anexo As String, ByVal Feven As String) As Vw_MAXfecVenRow
            Dim rowVw_MAXfecVenRow As Vw_MAXfecVenRow = CType(Me.NewRow,Vw_MAXfecVenRow)
            Dim columnValuesArray() As Object = New Object() {Anexo, Feven}
            rowVw_MAXfecVenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVw_MAXfecVenRow)
            Return rowVw_MAXfecVenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Vw_MAXfecVenDataTable = CType(MyBase.Clone,Vw_MAXfecVenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Vw_MAXfecVenDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnFeven = MyBase.Columns("Feven")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnFeven = New Global.System.Data.DataColumn("Feven", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeven)
            Me.columnAnexo.MaxLength = 9
            Me.columnFeven.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVw_MAXfecVenRow() As Vw_MAXfecVenRow
            Return CType(Me.NewRow,Vw_MAXfecVenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Vw_MAXfecVenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Vw_MAXfecVenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Vw_MAXfecVenRowChangedEvent) Is Nothing) Then
                RaiseEvent Vw_MAXfecVenRowChanged(Me, New Vw_MAXfecVenRowChangeEvent(CType(e.Row,Vw_MAXfecVenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Vw_MAXfecVenRowChangingEvent) Is Nothing) Then
                RaiseEvent Vw_MAXfecVenRowChanging(Me, New Vw_MAXfecVenRowChangeEvent(CType(e.Row,Vw_MAXfecVenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Vw_MAXfecVenRowDeletedEvent) Is Nothing) Then
                RaiseEvent Vw_MAXfecVenRowDeleted(Me, New Vw_MAXfecVenRowChangeEvent(CType(e.Row,Vw_MAXfecVenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Vw_MAXfecVenRowDeletingEvent) Is Nothing) Then
                RaiseEvent Vw_MAXfecVenRowDeleting(Me, New Vw_MAXfecVenRowChangeEvent(CType(e.Row,Vw_MAXfecVenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVw_MAXfecVenRow(ByVal row As Vw_MAXfecVenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Vw_MAXfecVenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EdoctavDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnLetra As Global.System.Data.DataColumn
        
        Private columnFeven As Global.System.Data.DataColumn
        
        Private columnNufac As Global.System.Data.DataColumn
        
        Private columnIndrec As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnAbcap As Global.System.Data.DataColumn
        
        Private columnInter As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnIvaCapital As Global.System.Data.DataColumn
        
        Private columncomFega As Global.System.Data.DataColumn
        
        Private columnivacomFega As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Edoctav"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LetraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLetra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FevenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeven
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NufacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNufac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IndrecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndrec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AbcapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbcap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IvaCapitalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIvaCapital
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property comFegaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomFega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ivacomFegaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnivacomFega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EdoctavRow
            Get
                Return CType(Me.Rows(index),EdoctavRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EdoctavRowChanging As EdoctavRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EdoctavRowChanged As EdoctavRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EdoctavRowDeleting As EdoctavRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EdoctavRowDeleted As EdoctavRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEdoctavRow(ByVal row As EdoctavRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEdoctavRow(ByVal Anexo As String, ByVal Letra As String, ByVal Feven As String, ByVal Nufac As Decimal, ByVal Indrec As String, ByVal Saldo As Decimal, ByVal Abcap As Decimal, ByVal Inter As Decimal, ByVal Iva As Decimal, ByVal IvaCapital As Decimal, ByVal comFega As Decimal, ByVal ivacomFega As Decimal) As EdoctavRow
            Dim rowEdoctavRow As EdoctavRow = CType(Me.NewRow,EdoctavRow)
            Dim columnValuesArray() As Object = New Object() {Anexo, Letra, Feven, Nufac, Indrec, Saldo, Abcap, Inter, Iva, IvaCapital, comFega, ivacomFega}
            rowEdoctavRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEdoctavRow)
            Return rowEdoctavRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EdoctavDataTable = CType(MyBase.Clone,EdoctavDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EdoctavDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnLetra = MyBase.Columns("Letra")
            Me.columnFeven = MyBase.Columns("Feven")
            Me.columnNufac = MyBase.Columns("Nufac")
            Me.columnIndrec = MyBase.Columns("Indrec")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnAbcap = MyBase.Columns("Abcap")
            Me.columnInter = MyBase.Columns("Inter")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnIvaCapital = MyBase.Columns("IvaCapital")
            Me.columncomFega = MyBase.Columns("comFega")
            Me.columnivacomFega = MyBase.Columns("ivacomFega")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnLetra = New Global.System.Data.DataColumn("Letra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLetra)
            Me.columnFeven = New Global.System.Data.DataColumn("Feven", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeven)
            Me.columnNufac = New Global.System.Data.DataColumn("Nufac", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNufac)
            Me.columnIndrec = New Global.System.Data.DataColumn("Indrec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndrec)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnAbcap = New Global.System.Data.DataColumn("Abcap", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbcap)
            Me.columnInter = New Global.System.Data.DataColumn("Inter", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInter)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnIvaCapital = New Global.System.Data.DataColumn("IvaCapital", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIvaCapital)
            Me.columncomFega = New Global.System.Data.DataColumn("comFega", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomFega)
            Me.columnivacomFega = New Global.System.Data.DataColumn("ivacomFega", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnivacomFega)
            Me.columnAnexo.MaxLength = 9
            Me.columnLetra.MaxLength = 3
            Me.columnFeven.MaxLength = 8
            Me.columnIndrec.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEdoctavRow() As EdoctavRow
            Return CType(Me.NewRow,EdoctavRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EdoctavRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EdoctavRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EdoctavRowChangedEvent) Is Nothing) Then
                RaiseEvent EdoctavRowChanged(Me, New EdoctavRowChangeEvent(CType(e.Row,EdoctavRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EdoctavRowChangingEvent) Is Nothing) Then
                RaiseEvent EdoctavRowChanging(Me, New EdoctavRowChangeEvent(CType(e.Row,EdoctavRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EdoctavRowDeletedEvent) Is Nothing) Then
                RaiseEvent EdoctavRowDeleted(Me, New EdoctavRowChangeEvent(CType(e.Row,EdoctavRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EdoctavRowDeletingEvent) Is Nothing) Then
                RaiseEvent EdoctavRowDeleting(Me, New EdoctavRowChangeEvent(CType(e.Row,EdoctavRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEdoctavRow(ByVal row As EdoctavRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EdoctavDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Minds_Pagos_AvioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnPromo As Global.System.Data.DataColumn
        
        Private columnSucursal As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnNumero As Global.System.Data.DataColumn
        
        Private columnLetra As Global.System.Data.DataColumn
        
        Private columnCheque As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnTipar As Global.System.Data.DataColumn
        
        Private columnFechaTerminacion As Global.System.Data.DataColumn
        
        Private columnEsEfectivo As Global.System.Data.DataColumn
        
        Private columnMINDS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Minds_Pagos_Avio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PromoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LetraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLetra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TiparColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaTerminacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaTerminacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EsEfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEsEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MINDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMINDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Minds_Pagos_AvioRow
            Get
                Return CType(Me.Rows(index),Minds_Pagos_AvioRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Minds_Pagos_AvioRowChanging As Minds_Pagos_AvioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Minds_Pagos_AvioRowChanged As Minds_Pagos_AvioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Minds_Pagos_AvioRowDeleting As Minds_Pagos_AvioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Minds_Pagos_AvioRowDeleted As Minds_Pagos_AvioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMinds_Pagos_AvioRow(ByVal row As Minds_Pagos_AvioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMinds_Pagos_AvioRow(ByVal Anexo As String, ByVal Fecha As String, ByVal Importe As Decimal, ByVal Promo As String, ByVal Sucursal As String, ByVal Serie As String, ByVal Numero As Decimal, ByVal Letra As String, ByVal Cheque As String, ByVal Cliente As String, ByVal Tipar As String, ByVal FechaTerminacion As String, ByVal EsEfectivo As Boolean, ByVal MINDS As Integer) As Minds_Pagos_AvioRow
            Dim rowMinds_Pagos_AvioRow As Minds_Pagos_AvioRow = CType(Me.NewRow,Minds_Pagos_AvioRow)
            Dim columnValuesArray() As Object = New Object() {Anexo, Fecha, Importe, Promo, Sucursal, Serie, Numero, Letra, Cheque, Cliente, Tipar, FechaTerminacion, EsEfectivo, MINDS}
            rowMinds_Pagos_AvioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMinds_Pagos_AvioRow)
            Return rowMinds_Pagos_AvioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByAnexoNumeroCliente(ByVal Anexo As String, ByVal Numero As Decimal, ByVal Cliente As String) As Minds_Pagos_AvioRow
            Return CType(Me.Rows.Find(New Object() {Anexo, Numero, Cliente}),Minds_Pagos_AvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Minds_Pagos_AvioDataTable = CType(MyBase.Clone,Minds_Pagos_AvioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Minds_Pagos_AvioDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnPromo = MyBase.Columns("Promo")
            Me.columnSucursal = MyBase.Columns("Sucursal")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnNumero = MyBase.Columns("Numero")
            Me.columnLetra = MyBase.Columns("Letra")
            Me.columnCheque = MyBase.Columns("Cheque")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnTipar = MyBase.Columns("Tipar")
            Me.columnFechaTerminacion = MyBase.Columns("FechaTerminacion")
            Me.columnEsEfectivo = MyBase.Columns("EsEfectivo")
            Me.columnMINDS = MyBase.Columns("MINDS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnPromo = New Global.System.Data.DataColumn("Promo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromo)
            Me.columnSucursal = New Global.System.Data.DataColumn("Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSucursal)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
            Me.columnLetra = New Global.System.Data.DataColumn("Letra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLetra)
            Me.columnCheque = New Global.System.Data.DataColumn("Cheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheque)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnTipar = New Global.System.Data.DataColumn("Tipar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipar)
            Me.columnFechaTerminacion = New Global.System.Data.DataColumn("FechaTerminacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaTerminacion)
            Me.columnEsEfectivo = New Global.System.Data.DataColumn("EsEfectivo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEsEfectivo)
            Me.columnMINDS = New Global.System.Data.DataColumn("MINDS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMINDS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAnexo, Me.columnNumero, Me.columnCliente}, true))
            Me.columnAnexo.AllowDBNull = false
            Me.columnAnexo.ReadOnly = true
            Me.columnAnexo.MaxLength = 12
            Me.columnFecha.MaxLength = 8
            Me.columnImporte.ReadOnly = true
            Me.columnPromo.AllowDBNull = false
            Me.columnPromo.MaxLength = 3
            Me.columnSucursal.MaxLength = 2
            Me.columnSerie.AllowDBNull = false
            Me.columnSerie.MaxLength = 3
            Me.columnNumero.AllowDBNull = false
            Me.columnLetra.MaxLength = 3
            Me.columnCheque.MaxLength = 15
            Me.columnCliente.AllowDBNull = false
            Me.columnCliente.MaxLength = 5
            Me.columnTipar.AllowDBNull = false
            Me.columnTipar.MaxLength = 1
            Me.columnFechaTerminacion.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMinds_Pagos_AvioRow() As Minds_Pagos_AvioRow
            Return CType(Me.NewRow,Minds_Pagos_AvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Minds_Pagos_AvioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Minds_Pagos_AvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Minds_Pagos_AvioRowChangedEvent) Is Nothing) Then
                RaiseEvent Minds_Pagos_AvioRowChanged(Me, New Minds_Pagos_AvioRowChangeEvent(CType(e.Row,Minds_Pagos_AvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Minds_Pagos_AvioRowChangingEvent) Is Nothing) Then
                RaiseEvent Minds_Pagos_AvioRowChanging(Me, New Minds_Pagos_AvioRowChangeEvent(CType(e.Row,Minds_Pagos_AvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Minds_Pagos_AvioRowDeletedEvent) Is Nothing) Then
                RaiseEvent Minds_Pagos_AvioRowDeleted(Me, New Minds_Pagos_AvioRowChangeEvent(CType(e.Row,Minds_Pagos_AvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Minds_Pagos_AvioRowDeletingEvent) Is Nothing) Then
                RaiseEvent Minds_Pagos_AvioRowDeleting(Me, New Minds_Pagos_AvioRowChangeEvent(CType(e.Row,Minds_Pagos_AvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMinds_Pagos_AvioRow(ByVal row As Minds_Pagos_AvioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Minds_Pagos_AvioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PromotoresDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPromotor As Global.System.Data.DataColumn
        
        Private columnDescPromotor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnAPaterno As Global.System.Data.DataColumn
        
        Private columnAMaterno As Global.System.Data.DataColumn
        
        Private columnStatusPromotor As Global.System.Data.DataColumn
        
        Private columnIniciales As Global.System.Data.DataColumn
        
        Private columnNumEmpleado As Global.System.Data.DataColumn
        
        Private columnIDPlaza As Global.System.Data.DataColumn
        
        Private columnFechaCarga As Global.System.Data.DataColumn
        
        Private columnNacionalidad As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnMinds As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Promotores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PromotorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromotor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescPromotorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescPromotor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property APaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AMaternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMaterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StatusPromotorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusPromotor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InicialesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIniciales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumEmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumEmpleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDPlazaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDPlaza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaCargaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCarga
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NacionalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNacionalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MindsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinds
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PromotoresRow
            Get
                Return CType(Me.Rows(index),PromotoresRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PromotoresRowChanging As PromotoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PromotoresRowChanged As PromotoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PromotoresRowDeleting As PromotoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PromotoresRowDeleted As PromotoresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPromotoresRow(ByVal row As PromotoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPromotoresRow(ByVal Promotor As String, ByVal DescPromotor As String, ByVal Nombre As String, ByVal APaterno As String, ByVal AMaterno As String, ByVal StatusPromotor As String, ByVal Iniciales As String, ByVal NumEmpleado As String, ByVal IDPlaza As String, ByVal FechaCarga As String, ByVal Nacionalidad As String, ByVal Puesto As String, ByVal Minds As Boolean) As PromotoresRow
            Dim rowPromotoresRow As PromotoresRow = CType(Me.NewRow,PromotoresRow)
            Dim columnValuesArray() As Object = New Object() {Promotor, DescPromotor, Nombre, APaterno, AMaterno, StatusPromotor, Iniciales, NumEmpleado, IDPlaza, FechaCarga, Nacionalidad, Puesto, Minds}
            rowPromotoresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPromotoresRow)
            Return rowPromotoresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPromotor(ByVal Promotor As String) As PromotoresRow
            Return CType(Me.Rows.Find(New Object() {Promotor}),PromotoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PromotoresDataTable = CType(MyBase.Clone,PromotoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PromotoresDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPromotor = MyBase.Columns("Promotor")
            Me.columnDescPromotor = MyBase.Columns("DescPromotor")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnAPaterno = MyBase.Columns("APaterno")
            Me.columnAMaterno = MyBase.Columns("AMaterno")
            Me.columnStatusPromotor = MyBase.Columns("StatusPromotor")
            Me.columnIniciales = MyBase.Columns("Iniciales")
            Me.columnNumEmpleado = MyBase.Columns("NumEmpleado")
            Me.columnIDPlaza = MyBase.Columns("IDPlaza")
            Me.columnFechaCarga = MyBase.Columns("FechaCarga")
            Me.columnNacionalidad = MyBase.Columns("Nacionalidad")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnMinds = MyBase.Columns("Minds")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPromotor = New Global.System.Data.DataColumn("Promotor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromotor)
            Me.columnDescPromotor = New Global.System.Data.DataColumn("DescPromotor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescPromotor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnAPaterno = New Global.System.Data.DataColumn("APaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPaterno)
            Me.columnAMaterno = New Global.System.Data.DataColumn("AMaterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMaterno)
            Me.columnStatusPromotor = New Global.System.Data.DataColumn("StatusPromotor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusPromotor)
            Me.columnIniciales = New Global.System.Data.DataColumn("Iniciales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIniciales)
            Me.columnNumEmpleado = New Global.System.Data.DataColumn("NumEmpleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumEmpleado)
            Me.columnIDPlaza = New Global.System.Data.DataColumn("IDPlaza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDPlaza)
            Me.columnFechaCarga = New Global.System.Data.DataColumn("FechaCarga", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCarga)
            Me.columnNacionalidad = New Global.System.Data.DataColumn("Nacionalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNacionalidad)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnMinds = New Global.System.Data.DataColumn("Minds", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinds)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPromotor}, true))
            Me.columnPromotor.AllowDBNull = false
            Me.columnPromotor.Unique = true
            Me.columnPromotor.MaxLength = 3
            Me.columnDescPromotor.AllowDBNull = false
            Me.columnDescPromotor.MaxLength = 40
            Me.columnNombre.MaxLength = 30
            Me.columnAPaterno.MaxLength = 30
            Me.columnAMaterno.MaxLength = 30
            Me.columnStatusPromotor.AllowDBNull = false
            Me.columnStatusPromotor.MaxLength = 1
            Me.columnIniciales.AllowDBNull = false
            Me.columnIniciales.MaxLength = 4
            Me.columnNumEmpleado.MaxLength = 8
            Me.columnIDPlaza.MaxLength = 9
            Me.columnFechaCarga.MaxLength = 8
            Me.columnNacionalidad.MaxLength = 2
            Me.columnPuesto.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPromotoresRow() As PromotoresRow
            Return CType(Me.NewRow,PromotoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PromotoresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PromotoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PromotoresRowChangedEvent) Is Nothing) Then
                RaiseEvent PromotoresRowChanged(Me, New PromotoresRowChangeEvent(CType(e.Row,PromotoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PromotoresRowChangingEvent) Is Nothing) Then
                RaiseEvent PromotoresRowChanging(Me, New PromotoresRowChangeEvent(CType(e.Row,PromotoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PromotoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent PromotoresRowDeleted(Me, New PromotoresRowChangeEvent(CType(e.Row,PromotoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PromotoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent PromotoresRowDeleting(Me, New PromotoresRowChangeEvent(CType(e.Row,PromotoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePromotoresRow(ByVal row As PromotoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PromotoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReferenciadoEnEfectivoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnRerferencia As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnFechaMoV As Global.System.Data.DataColumn
        
        Private columnRerferenciaORG As Global.System.Data.DataColumn
        
        Private columnRerferenciaORG1 As Global.System.Data.DataColumn
        
        Private columnImporteEfectivo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReferenciadoEnEfectivo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RerferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRerferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FechaMoVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaMoV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RerferenciaORGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRerferenciaORG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RerferenciaORG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRerferenciaORG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ImporteEfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporteEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReferenciadoEnEfectivoRow
            Get
                Return CType(Me.Rows(index),ReferenciadoEnEfectivoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ReferenciadoEnEfectivoRowChanging As ReferenciadoEnEfectivoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ReferenciadoEnEfectivoRowChanged As ReferenciadoEnEfectivoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ReferenciadoEnEfectivoRowDeleting As ReferenciadoEnEfectivoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ReferenciadoEnEfectivoRowDeleted As ReferenciadoEnEfectivoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddReferenciadoEnEfectivoRow(ByVal row As ReferenciadoEnEfectivoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddReferenciadoEnEfectivoRow(ByVal Anexo As String, ByVal Fecha As String, ByVal Rerferencia As String, ByVal Importe As Decimal, ByVal Banco As String, ByVal FechaMoV As Date, ByVal RerferenciaORG As String, ByVal RerferenciaORG1 As String, ByVal ImporteEfectivo As Decimal) As ReferenciadoEnEfectivoRow
            Dim rowReferenciadoEnEfectivoRow As ReferenciadoEnEfectivoRow = CType(Me.NewRow,ReferenciadoEnEfectivoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Anexo, Fecha, Rerferencia, Importe, Banco, FechaMoV, RerferenciaORG, RerferenciaORG1, ImporteEfectivo}
            rowReferenciadoEnEfectivoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReferenciadoEnEfectivoRow)
            Return rowReferenciadoEnEfectivoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Decimal) As ReferenciadoEnEfectivoRow
            Return CType(Me.Rows.Find(New Object() {ID}),ReferenciadoEnEfectivoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReferenciadoEnEfectivoDataTable = CType(MyBase.Clone,ReferenciadoEnEfectivoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReferenciadoEnEfectivoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnRerferencia = MyBase.Columns("Rerferencia")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnFechaMoV = MyBase.Columns("FechaMoV")
            Me.columnRerferenciaORG = MyBase.Columns("RerferenciaORG")
            Me.columnRerferenciaORG1 = MyBase.Columns("RerferenciaORG1")
            Me.columnImporteEfectivo = MyBase.Columns("ImporteEfectivo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnRerferencia = New Global.System.Data.DataColumn("Rerferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRerferencia)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnFechaMoV = New Global.System.Data.DataColumn("FechaMoV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaMoV)
            Me.columnRerferenciaORG = New Global.System.Data.DataColumn("RerferenciaORG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRerferenciaORG)
            Me.columnRerferenciaORG1 = New Global.System.Data.DataColumn("RerferenciaORG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRerferenciaORG1)
            Me.columnImporteEfectivo = New Global.System.Data.DataColumn("ImporteEfectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporteEfectivo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAnexo.MaxLength = 9
            Me.columnFecha.MaxLength = 8
            Me.columnRerferencia.MaxLength = 50
            Me.columnBanco.MaxLength = 2
            Me.columnRerferenciaORG.MaxLength = 50
            Me.columnRerferenciaORG1.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewReferenciadoEnEfectivoRow() As ReferenciadoEnEfectivoRow
            Return CType(Me.NewRow,ReferenciadoEnEfectivoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReferenciadoEnEfectivoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReferenciadoEnEfectivoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReferenciadoEnEfectivoRowChangedEvent) Is Nothing) Then
                RaiseEvent ReferenciadoEnEfectivoRowChanged(Me, New ReferenciadoEnEfectivoRowChangeEvent(CType(e.Row,ReferenciadoEnEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReferenciadoEnEfectivoRowChangingEvent) Is Nothing) Then
                RaiseEvent ReferenciadoEnEfectivoRowChanging(Me, New ReferenciadoEnEfectivoRowChangeEvent(CType(e.Row,ReferenciadoEnEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReferenciadoEnEfectivoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReferenciadoEnEfectivoRowDeleted(Me, New ReferenciadoEnEfectivoRowChangeEvent(CType(e.Row,ReferenciadoEnEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReferenciadoEnEfectivoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReferenciadoEnEfectivoRowDeleting(Me, New ReferenciadoEnEfectivoRowChangeEvent(CType(e.Row,ReferenciadoEnEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveReferenciadoEnEfectivoRow(ByVal row As ReferenciadoEnEfectivoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ProductionDataSet = New ProductionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReferenciadoEnEfectivoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ClientesRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientes As ClientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cliente() As String
            Get
                Return CType(Me(Me.tableClientes.ClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientes.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Descr() As String
            Get
                Return CType(Me(Me.tableClientes.DescrColumn),String)
            End Get
            Set
                Me(Me.tableClientes.DescrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tableClientes.TipoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.SucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sucursal' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Promo() As String
            Get
                Return CType(Me(Me.tableClientes.PromoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PromoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Gestor() As String
            Get
                Return CType(Me(Me.tableClientes.GestorColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GestorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Calle() As String
            Get
                Return CType(Me(Me.tableClientes.CalleColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Colonia() As String
            Get
                Return CType(Me(Me.tableClientes.ColoniaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.ColoniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Delegacion() As String
            Get
                Return CType(Me(Me.tableClientes.DelegacionColumn),String)
            End Get
            Set
                Me(Me.tableClientes.DelegacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Copos() As String
            Get
                Return CType(Me(Me.tableClientes.CoposColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CoposColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Telef1() As String
            Get
                Return CType(Me(Me.tableClientes.Telef1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Telef1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Telef2() As String
            Get
                Return CType(Me(Me.tableClientes.Telef2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Telef2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Telef3() As String
            Get
                Return CType(Me(Me.tableClientes.Telef3Column),String)
            End Get
            Set
                Me(Me.tableClientes.Telef3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fax() As String
            Get
                Return CType(Me(Me.tableClientes.FaxColumn),String)
            End Get
            Set
                Me(Me.tableClientes.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fecha1() As String
            Get
                Return CType(Me(Me.tableClientes.Fecha1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Fecha1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Giro() As String
            Get
                Return CType(Me(Me.tableClientes.GiroColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GiroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Plaza() As String
            Get
                Return CType(Me(Me.tableClientes.PlazaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PlazaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RFC() As String
            Get
                Return CType(Me(Me.tableClientes.RFCColumn),String)
            End Get
            Set
                Me(Me.tableClientes.RFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CURP() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.CURPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CURP' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.CURPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMail1() As String
            Get
                Return CType(Me(Me.tableClientes.EMail1Column),String)
            End Get
            Set
                Me(Me.tableClientes.EMail1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMail2() As String
            Get
                Return CType(Me(Me.tableClientes.EMail2Column),String)
            End Get
            Set
                Me(Me.tableClientes.EMail2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Banco() As String
            Get
                Return CType(Me(Me.tableClientes.BancoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentaBancomer() As String
            Get
                Return CType(Me(Me.tableClientes.CuentaBancomerColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CuentaBancomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentaCLABE() As String
            Get
                Return CType(Me(Me.tableClientes.CuentaCLABEColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CuentaCLABEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GeneClie() As String
            Get
                Return CType(Me(Me.tableClientes.GeneClieColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GeneClieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomrepr() As String
            Get
                Return CType(Me(Me.tableClientes.NomreprColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NomreprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Generepr() As String
            Get
                Return CType(Me(Me.tableClientes.GenereprColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GenereprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Poderepr() As String
            Get
                Return CType(Me(Me.tableClientes.PodereprColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PodereprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomrepr2() As String
            Get
                Return CType(Me(Me.tableClientes.Nomrepr2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Nomrepr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Generep2() As String
            Get
                Return CType(Me(Me.tableClientes.Generep2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Generep2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Poderep2() As String
            Get
                Return CType(Me(Me.tableClientes.Poderep2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Poderep2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Coac() As String
            Get
                Return CType(Me(Me.tableClientes.CoacColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CoacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipcoac() As String
            Get
                Return CType(Me(Me.tableClientes.TipcoacColumn),String)
            End Get
            Set
                Me(Me.tableClientes.TipcoacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomcoac() As String
            Get
                Return CType(Me(Me.tableClientes.NomcoacColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NomcoacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Genecoac() As String
            Get
                Return CType(Me(Me.tableClientes.GenecoacColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GenecoacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomrcoac() As String
            Get
                Return CType(Me(Me.tableClientes.NomrcoacColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NomrcoacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Genercoa() As String
            Get
                Return CType(Me(Me.tableClientes.GenercoaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GenercoaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Podercoa() As String
            Get
                Return CType(Me(Me.tableClientes.PodercoaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PodercoaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Obli() As String
            Get
                Return CType(Me(Me.tableClientes.ObliColumn),String)
            End Get
            Set
                Me(Me.tableClientes.ObliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TipoObli() As String
            Get
                Return CType(Me(Me.tableClientes.TipoObliColumn),String)
            End Get
            Set
                Me(Me.tableClientes.TipoObliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NomObli() As String
            Get
                Return CType(Me(Me.tableClientes.NomObliColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NomObliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GeneObli() As String
            Get
                Return CType(Me(Me.tableClientes.GeneObliColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GeneObliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NomrObl() As String
            Get
                Return CType(Me(Me.tableClientes.NomrOblColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NomrOblColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GenerObl() As String
            Get
                Return CType(Me(Me.tableClientes.GenerOblColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GenerOblColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PoderObl() As String
            Get
                Return CType(Me(Me.tableClientes.PoderOblColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PoderOblColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aval1() As String
            Get
                Return CType(Me(Me.tableClientes.Aval1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Aval1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipaval1() As String
            Get
                Return CType(Me(Me.tableClientes.Tipaval1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Tipaval1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomaval1() As String
            Get
                Return CType(Me(Me.tableClientes.Nomaval1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Nomaval1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Geneava1() As String
            Get
                Return CType(Me(Me.tableClientes.Geneava1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Geneava1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomrava1() As String
            Get
                Return CType(Me(Me.tableClientes.Nomrava1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Nomrava1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Generav1() As String
            Get
                Return CType(Me(Me.tableClientes.Generav1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Generav1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Poderav1() As String
            Get
                Return CType(Me(Me.tableClientes.Poderav1Column),String)
            End Get
            Set
                Me(Me.tableClientes.Poderav1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aval2() As String
            Get
                Return CType(Me(Me.tableClientes.Aval2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Aval2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipaval2() As String
            Get
                Return CType(Me(Me.tableClientes.Tipaval2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Tipaval2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomaval2() As String
            Get
                Return CType(Me(Me.tableClientes.Nomaval2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Nomaval2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GeneAva2() As String
            Get
                Return CType(Me(Me.tableClientes.GeneAva2Column),String)
            End Get
            Set
                Me(Me.tableClientes.GeneAva2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nomrava2() As String
            Get
                Return CType(Me(Me.tableClientes.Nomrava2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Nomrava2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Generav2() As String
            Get
                Return CType(Me(Me.tableClientes.Generav2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Generav2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Poderav2() As String
            Get
                Return CType(Me(Me.tableClientes.Poderav2Column),String)
            End Get
            Set
                Me(Me.tableClientes.Poderav2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Agrupa() As String
            Get
                Return CType(Me(Me.tableClientes.AgrupaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.AgrupaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SegVida() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.SegVidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SegVida' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.SegVidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TasaIVACliente() As Decimal
            Get
                Return CType(Me(Me.tableClientes.TasaIVAClienteColumn),Decimal)
            End Get
            Set
                Me(Me.tableClientes.TasaIVAClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentadePago1() As String
            Get
                Return CType(Me(Me.tableClientes.CuentadePago1Column),String)
            End Get
            Set
                Me(Me.tableClientes.CuentadePago1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FormadePago1() As String
            Get
                Return CType(Me(Me.tableClientes.FormadePago1Column),String)
            End Get
            Set
                Me(Me.tableClientes.FormadePago1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentadePago2() As String
            Get
                Return CType(Me(Me.tableClientes.CuentadePago2Column),String)
            End Get
            Set
                Me(Me.tableClientes.CuentadePago2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FormadePago2() As String
            Get
                Return CType(Me(Me.tableClientes.FormadePago2Column),String)
            End Get
            Set
                Me(Me.tableClientes.FormadePago2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentadePago3() As String
            Get
                Return CType(Me(Me.tableClientes.CuentadePago3Column),String)
            End Get
            Set
                Me(Me.tableClientes.CuentadePago3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FormadePago3() As String
            Get
                Return CType(Me(Me.tableClientes.FormadePago3Column),String)
            End Get
            Set
                Me(Me.tableClientes.FormadePago3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentadePago4() As String
            Get
                Return CType(Me(Me.tableClientes.CuentadePago4Column),String)
            End Get
            Set
                Me(Me.tableClientes.CuentadePago4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FormadePago4() As String
            Get
                Return CType(Me(Me.tableClientes.FormadePago4Column),String)
            End Get
            Set
                Me(Me.tableClientes.FormadePago4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NombreCliente() As String
            Get
                Return CType(Me(Me.tableClientes.NombreClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ApellidoPaterno() As String
            Get
                Return CType(Me(Me.tableClientes.ApellidoPaternoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.ApellidoPaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ApellidoMaterno() As String
            Get
                Return CType(Me(Me.tableClientes.ApellidoMaternoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.ApellidoMaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Genero() As String
            Get
                Return CType(Me(Me.tableClientes.GeneroColumn),String)
            End Get
            Set
                Me(Me.tableClientes.GeneroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Autoriza() As String
            Get
                Return CType(Me(Me.tableClientes.AutorizaColumn),String)
            End Get
            Set
                Me(Me.tableClientes.AutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property siebel() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientes.siebelColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'siebel' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.siebelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableClientes.SucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSucursalNull()
            Me(Me.tableClientes.SucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCURPNull() As Boolean
            Return Me.IsNull(Me.tableClientes.CURPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCURPNull()
            Me(Me.tableClientes.CURPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSegVidaNull() As Boolean
            Return Me.IsNull(Me.tableClientes.SegVidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSegVidaNull()
            Me(Me.tableClientes.SegVidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IssiebelNull() As Boolean
            Return Me.IsNull(Me.tableClientes.siebelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetsiebelNull()
            Me(Me.tableClientes.siebelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AnexosRow
        Inherits Global.System.Data.DataRow
        
        Private tableAnexos As AnexosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAnexos = CType(Me.Table,AnexosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Return CType(Me(Me.tableAnexos.AnexoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Flcan() As String
            Get
                Return CType(Me(Me.tableAnexos.FlcanColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FlcanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Vencida() As String
            Get
                Return CType(Me(Me.tableAnexos.VencidaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.VencidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Garantia() As String
            Get
                Return CType(Me(Me.tableAnexos.GarantiaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.GarantiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Referencia() As String
            Get
                Return CType(Me(Me.tableAnexos.ReferenciaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cliente() As String
            Get
                Return CType(Me(Me.tableAnexos.ClienteColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Impeq() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.ImpeqColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.ImpeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Segeq() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.SegeqColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.SegeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Finse() As String
            Get
                Return CType(Me(Me.tableAnexos.FinseColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FinseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Plazo() As Byte
            Get
                Return CType(Me(Me.tableAnexos.PlazoColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.PlazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Plaseg() As Byte
            Get
                Return CType(Me(Me.tableAnexos.PlasegColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.PlasegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ivaeq() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaeqColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ivase() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaseColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Porieq() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.PorieqColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.PorieqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PorInt() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.PorIntColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.PorIntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Amorin() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.AmorinColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.AmorinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IvaAmorin() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaAmorinColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaAmorinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tippe() As String
            Get
                Return CType(Me(Me.tableAnexos.TippeColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TippeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipta() As String
            Get
                Return CType(Me(Me.tableAnexos.TiptaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TiptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tasas() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.TasasColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.TasasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AcumulaIntereses() As String
            Get
                Return CType(Me(Me.tableAnexos.AcumulaInteresesColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.AcumulaInteresesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipar() As String
            Get
                Return CType(Me(Me.tableAnexos.TiparColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TiparColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Forca() As String
            Get
                Return CType(Me(Me.tableAnexos.ForcaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ForcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipmen() As String
            Get
                Return CType(Me(Me.tableAnexos.TipmenColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TipmenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Difer() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.DiferColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.DiferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RtasD() As Byte
            Get
                Return CType(Me(Me.tableAnexos.RtasDColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.RtasDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ImpRD() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.ImpRDColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.ImpRDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IvaRD() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaRDColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaRDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Porco() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.PorcoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.PorcoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comis() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.ComisColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.ComisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Porop() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.PoropColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.PoropColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fechacon() As String
            Get
                Return CType(Me(Me.tableAnexos.FechaconColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FechaconColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fvenc() As String
            Get
                Return CType(Me(Me.tableAnexos.FvencColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FvencColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fondeo() As String
            Get
                Return CType(Me(Me.tableAnexos.FondeoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FondeoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DepNafin() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.DepNafinColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.DepNafinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Critas() As String
            Get
                Return CType(Me(Me.tableAnexos.CritasColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.CritasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipeq() As String
            Get
                Return CType(Me(Me.tableAnexos.TipeqColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TipeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Gastos() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.GastosColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.GastosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IvaGastos() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaGastosColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaGastosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipmon() As String
            Get
                Return CType(Me(Me.tableAnexos.TipmonColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TipmonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Mensu() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.MensuColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.MensuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tasmor() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.TasmorColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.TasmorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Taspen() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.TaspenColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.TaspenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Doc1() As String
            Get
                Return CType(Me(Me.tableAnexos.Doc1Column),String)
            End Get
            Set
                Me(Me.tableAnexos.Doc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Doc2() As String
            Get
                Return CType(Me(Me.tableAnexos.Doc2Column),String)
            End Get
            Set
                Me(Me.tableAnexos.Doc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Doc3() As String
            Get
                Return CType(Me(Me.tableAnexos.Doc3Column),String)
            End Get
            Set
                Me(Me.tableAnexos.Doc3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Prendaria() As String
            Get
                Return CType(Me(Me.tableAnexos.PrendariaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.PrendariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Prenda() As String
            Get
                Return CType(Me(Me.tableAnexos.PrendaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.PrendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Observa() As String
            Get
                Return CType(Me(Me.tableAnexos.ObservaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ObservaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fechafin() As String
            Get
                Return CType(Me(Me.tableAnexos.FechafinColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.FechafinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Factor() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.FactorColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.FactorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Piso() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.PisoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.PisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Techo() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.TechoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.TechoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tasamax() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.TasamaxColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.TasamaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Adeudo() As String
            Get
                Return CType(Me(Me.tableAnexos.AdeudoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.AdeudoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RD() As Byte
            Get
                Return CType(Me(Me.tableAnexos.RDColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.RDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ImpDG() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.ImpDGColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.ImpDGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IvaDG() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IvaDGColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IvaDGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Derechos() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.DerechosColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.DerechosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DG() As Byte
            Get
                Return CType(Me(Me.tableAnexos.DGColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.DGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GHipotec() As String
            Get
                Return CType(Me(Me.tableAnexos.GHipotecColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.GHipotecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lugar() As String
            Get
                Return CType(Me(Me.tableAnexos.LugarColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.LugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Notaria() As String
            Get
                Return CType(Me(Me.tableAnexos.NotariaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.NotariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Escritura() As String
            Get
                Return CType(Me(Me.tableAnexos.EscrituraColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.EscrituraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Scaneo() As String
            Get
                Return CType(Me(Me.tableAnexos.ScaneoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ScaneoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Archivo() As String
            Get
                Return CType(Me(Me.tableAnexos.ArchivoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.ArchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Servicio() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.ServicioColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.ServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IVAServicio() As Decimal
            Get
                Return CType(Me(Me.tableAnexos.IVAServicioColumn),Decimal)
            End Get
            Set
                Me(Me.tableAnexos.IVAServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fecha_Pago() As String
            Get
                Return CType(Me(Me.tableAnexos.Fecha_PagoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.Fecha_PagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cobertura() As String
            Get
                Return CType(Me(Me.tableAnexos.CoberturaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.CoberturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pagos() As Byte
            Get
                Return CType(Me(Me.tableAnexos.PagosColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.PagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TipoFrecuencia() As String
            Get
                Return CType(Me(Me.tableAnexos.TipoFrecuenciaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TipoFrecuenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ValorFrecuencia() As Byte
            Get
                Return CType(Me(Me.tableAnexos.ValorFrecuenciaColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.ValorFrecuenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Amortizaciones() As Byte
            Get
                Return CType(Me(Me.tableAnexos.AmortizacionesColumn),Byte)
            End Get
            Set
                Me(Me.tableAnexos.AmortizacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Banco() As String
            Get
                Return CType(Me(Me.tableAnexos.BancoColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CuentaCLABE() As String
            Get
                Return CType(Me(Me.tableAnexos.CuentaCLABEColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.CuentaCLABEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Autoriza() As String
            Get
                Return CType(Me(Me.tableAnexos.AutorizaColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.AutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Titular() As String
            Get
                Return CType(Me(Me.tableAnexos.TitularColumn),String)
            End Get
            Set
                Me(Me.tableAnexos.TitularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property idCredito() As String
            Get
                Try 
                    Return CType(Me(Me.tableAnexos.idCreditoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idCredito' de la tabla 'Anexos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAnexos.idCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Minds() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAnexos.MindsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Minds' de la tabla 'Anexos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAnexos.MindsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidCreditoNull() As Boolean
            Return Me.IsNull(Me.tableAnexos.idCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidCreditoNull()
            Me(Me.tableAnexos.idCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMindsNull() As Boolean
            Return Me.IsNull(Me.tableAnexos.MindsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMindsNull()
            Me(Me.tableAnexos.MindsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AviosRow
        Inherits Global.System.Data.DataRow
        
        Private tableAvios As AviosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAvios = CType(Me.Table,AviosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Return CType(Me(Me.tableAvios.AnexoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ciclo() As String
            Get
                Return CType(Me(Me.tableAvios.CicloColumn),String)
            End Get
            Set
                Me(Me.tableAvios.CicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Flcan() As String
            Get
                Return CType(Me(Me.tableAvios.FlcanColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FlcanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDCredito() As String
            Get
                Return CType(Me(Me.tableAvios.IDCreditoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.IDCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipar() As String
            Get
                Return CType(Me(Me.tableAvios.TiparColumn),String)
            End Get
            Set
                Me(Me.tableAvios.TiparColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cliente() As String
            Get
                Return CType(Me(Me.tableAvios.ClienteColumn),String)
            End Get
            Set
                Me(Me.tableAvios.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDPersona() As String
            Get
                Return CType(Me(Me.tableAvios.IDPersonaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.IDPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDDTU() As String
            Get
                Return CType(Me(Me.tableAvios.IDDTUColumn),String)
            End Get
            Set
                Me(Me.tableAvios.IDDTUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDContrato() As String
            Get
                Return CType(Me(Me.tableAvios.IDContratoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.IDContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstratoActual() As String
            Get
                Return CType(Me(Me.tableAvios.EstratoActualColumn),String)
            End Get
            Set
                Me(Me.tableAvios.EstratoActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SustraeActual() As String
            Get
                Return CType(Me(Me.tableAvios.SustraeActualColumn),String)
            End Get
            Set
                Me(Me.tableAvios.SustraeActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaConsulta() As String
            Get
                Return CType(Me(Me.tableAvios.FechaConsultaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaConsultaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaAutorizacion() As String
            Get
                Return CType(Me(Me.tableAvios.FechaAutorizacionColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaAutorizacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaTerminacion() As String
            Get
                Return CType(Me(Me.tableAvios.FechaTerminacionColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaTerminacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GarantiaPrendaria() As String
            Get
                Return CType(Me(Me.tableAvios.GarantiaPrendariaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.GarantiaPrendariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GarantiaHipotecaria() As String
            Get
                Return CType(Me(Me.tableAvios.GarantiaHipotecariaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.GarantiaHipotecariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GarantiaUsufructo() As String
            Get
                Return CType(Me(Me.tableAvios.GarantiaUsufructoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.GarantiaUsufructoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LineaActual() As Decimal
            Get
                Return CType(Me(Me.tableAvios.LineaActualColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.LineaActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HectareasActual() As Decimal
            Get
                Return CType(Me(Me.tableAvios.HectareasActualColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.HectareasActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipta() As String
            Get
                Return CType(Me(Me.tableAvios.TiptaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.TiptaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tasas() As Decimal
            Get
                Return CType(Me(Me.tableAvios.TasasColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.TasasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DiferencialFINAGIL() As Decimal
            Get
                Return CType(Me(Me.tableAvios.DiferencialFINAGILColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.DiferencialFINAGILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DiferencialFIRA() As Decimal
            Get
                Return CType(Me(Me.tableAvios.DiferencialFIRAColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.DiferencialFIRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CostoHectarea() As Decimal
            Get
                Return CType(Me(Me.tableAvios.CostoHectareaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.CostoHectareaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PrecioTonelada() As Decimal
            Get
                Return CType(Me(Me.tableAvios.PrecioToneladaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.PrecioToneladaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ToneladasHectarea() As Decimal
            Get
                Return CType(Me(Me.tableAvios.ToneladasHectareaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.ToneladasHectareaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Verificado() As String
            Get
                Return CType(Me(Me.tableAvios.VerificadoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.VerificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Predios() As String
            Get
                Return CType(Me(Me.tableAvios.PrediosColumn),String)
            End Get
            Set
                Me(Me.tableAvios.PrediosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Muebles() As String
            Get
                Return CType(Me(Me.tableAvios.MueblesColumn),String)
            End Get
            Set
                Me(Me.tableAvios.MueblesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Inmuebles() As String
            Get
                Return CType(Me(Me.tableAvios.InmueblesColumn),String)
            End Get
            Set
                Me(Me.tableAvios.InmueblesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Usufructo() As String
            Get
                Return CType(Me(Me.tableAvios.UsufructoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.UsufructoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Semilla() As String
            Get
                Return CType(Me(Me.tableAvios.SemillaColumn),String)
            End Get
            Set
                Me(Me.tableAvios.SemillaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UltimoCorte() As String
            Get
                Return CType(Me(Me.tableAvios.UltimoCorteColumn),String)
            End Get
            Set
                Me(Me.tableAvios.UltimoCorteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Parafin() As String
            Get
                Return CType(Me(Me.tableAvios.ParafinColumn),String)
            End Get
            Set
                Me(Me.tableAvios.ParafinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaLimiteDTC() As String
            Get
                Return CType(Me(Me.tableAvios.FechaLimiteDTCColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaLimiteDTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaContrato() As String
            Get
                Return CType(Me(Me.tableAvios.FechaContratoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaSiembrai() As String
            Get
                Return CType(Me(Me.tableAvios.FechaSiembraiColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaSiembraiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaSiembraf() As String
            Get
                Return CType(Me(Me.tableAvios.FechaSiembrafColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaSiembrafColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaCosechai() As String
            Get
                Return CType(Me(Me.tableAvios.FechaCosechaiColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaCosechaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaCosechaf() As String
            Get
                Return CType(Me(Me.tableAvios.FechaCosechafColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FechaCosechafColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Porcomi() As Decimal
            Get
                Return CType(Me(Me.tableAvios.PorcomiColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.PorcomiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaTermino2() As String
            Get
                Return CType(Me(Me.tableAvios.FechaTermino2Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaTermino2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaTermino3() As String
            Get
                Return CType(Me(Me.tableAvios.FechaTermino3Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaTermino3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SegundoCiclo() As String
            Get
                Return CType(Me(Me.tableAvios.SegundoCicloColumn),String)
            End Get
            Set
                Me(Me.tableAvios.SegundoCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TercerCiclo() As String
            Get
                Return CType(Me(Me.tableAvios.TercerCicloColumn),String)
            End Get
            Set
                Me(Me.tableAvios.TercerCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaSiembra2() As String
            Get
                Return CType(Me(Me.tableAvios.FechaSiembra2Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaSiembra2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaSiembra3() As String
            Get
                Return CType(Me(Me.tableAvios.FechaSiembra3Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaSiembra3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaCosecha2() As String
            Get
                Return CType(Me(Me.tableAvios.FechaCosecha2Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaCosecha2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaCosecha3() As String
            Get
                Return CType(Me(Me.tableAvios.FechaCosecha3Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaCosecha3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaLimiteDTC2() As String
            Get
                Return CType(Me(Me.tableAvios.FechaLimiteDTC2Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaLimiteDTC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaLimiteDTC3() As String
            Get
                Return CType(Me(Me.tableAvios.FechaLimiteDTC3Column),String)
            End Get
            Set
                Me(Me.tableAvios.FechaLimiteDTC3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CostoMaxHa() As Decimal
            Get
                Return CType(Me(Me.tableAvios.CostoMaxHaColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.CostoMaxHaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LineaMax() As Decimal
            Get
                Return CType(Me(Me.tableAvios.LineaMaxColumn),Decimal)
            End Get
            Set
                Me(Me.tableAvios.LineaMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GaranteHip() As String
            Get
                Return CType(Me(Me.tableAvios.GaranteHipColumn),String)
            End Get
            Set
                Me(Me.tableAvios.GaranteHipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GarantePre() As String
            Get
                Return CType(Me(Me.tableAvios.GarantePreColumn),String)
            End Get
            Set
                Me(Me.tableAvios.GarantePreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fondeo() As String
            Get
                Return CType(Me(Me.tableAvios.FondeoColumn),String)
            End Get
            Set
                Me(Me.tableAvios.FondeoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Minds() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAvios.MindsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Minds' de la tabla 'Avios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvios.MindsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMindsNull() As Boolean
            Return Me.IsNull(Me.tableAvios.MindsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMindsNull()
            Me(Me.tableAvios.MindsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Vw_MAXfecVenRow
        Inherits Global.System.Data.DataRow
        
        Private tableVw_MAXfecVen As Vw_MAXfecVenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVw_MAXfecVen = CType(Me.Table,Vw_MAXfecVenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVw_MAXfecVen.AnexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Anexo' de la tabla 'Vw_MAXfecVen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVw_MAXfecVen.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Feven() As String
            Get
                Try 
                    Return CType(Me(Me.tableVw_MAXfecVen.FevenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Feven' de la tabla 'Vw_MAXfecVen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVw_MAXfecVen.FevenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnexoNull() As Boolean
            Return Me.IsNull(Me.tableVw_MAXfecVen.AnexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnexoNull()
            Me(Me.tableVw_MAXfecVen.AnexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFevenNull() As Boolean
            Return Me.IsNull(Me.tableVw_MAXfecVen.FevenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFevenNull()
            Me(Me.tableVw_MAXfecVen.FevenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EdoctavRow
        Inherits Global.System.Data.DataRow
        
        Private tableEdoctav As EdoctavDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEdoctav = CType(Me.Table,EdoctavDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.AnexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Anexo' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Letra() As String
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.LetraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Letra' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.LetraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Feven() As String
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.FevenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Feven' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.FevenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nufac() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.NufacColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nufac' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.NufacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Indrec() As String
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.IndrecColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Indrec' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.IndrecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Saldo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.SaldoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Abcap() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.AbcapColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abcap' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.AbcapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Inter() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.InterColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Inter' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.InterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Iva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.IvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Iva' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IvaCapital() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.IvaCapitalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IvaCapital' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.IvaCapitalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comFega() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.comFegaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'comFega' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.comFegaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ivacomFega() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEdoctav.ivacomFegaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ivacomFega' de la tabla 'Edoctav' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEdoctav.ivacomFegaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnexoNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.AnexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnexoNull()
            Me(Me.tableEdoctav.AnexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLetraNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.LetraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLetraNull()
            Me(Me.tableEdoctav.LetraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFevenNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.FevenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFevenNull()
            Me(Me.tableEdoctav.FevenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNufacNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.NufacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNufacNull()
            Me(Me.tableEdoctav.NufacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIndrecNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.IndrecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIndrecNull()
            Me(Me.tableEdoctav.IndrecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSaldoNull()
            Me(Me.tableEdoctav.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAbcapNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.AbcapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAbcapNull()
            Me(Me.tableEdoctav.AbcapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInterNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.InterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInterNull()
            Me(Me.tableEdoctav.InterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIvaNull()
            Me(Me.tableEdoctav.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIvaCapitalNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.IvaCapitalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIvaCapitalNull()
            Me(Me.tableEdoctav.IvaCapitalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscomFegaNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.comFegaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcomFegaNull()
            Me(Me.tableEdoctav.comFegaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsivacomFegaNull() As Boolean
            Return Me.IsNull(Me.tableEdoctav.ivacomFegaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetivacomFegaNull()
            Me(Me.tableEdoctav.ivacomFegaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Minds_Pagos_AvioRow
        Inherits Global.System.Data.DataRow
        
        Private tableMinds_Pagos_Avio As Minds_Pagos_AvioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMinds_Pagos_Avio = CType(Me.Table,Minds_Pagos_AvioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.AnexoColumn),String)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Promo() As String
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.PromoColumn),String)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.PromoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.SucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sucursal' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Serie() As String
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.SerieColumn),String)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Numero() As Decimal
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.NumeroColumn),Decimal)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Letra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.LetraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Letra' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.LetraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cheque() As String
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.ChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cheque' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.ChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cliente() As String
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.ClienteColumn),String)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tipar() As String
            Get
                Return CType(Me(Me.tableMinds_Pagos_Avio.TiparColumn),String)
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.TiparColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaTerminacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.FechaTerminacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaTerminacion' de la tabla 'Minds_Pagos_Avio' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.FechaTerminacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EsEfectivo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.EsEfectivoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EsEfectivo' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.EsEfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MINDS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMinds_Pagos_Avio.MINDSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MINDS' de la tabla 'Minds_Pagos_Avio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMinds_Pagos_Avio.MINDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFechaNull()
            Me(Me.tableMinds_Pagos_Avio.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetImporteNull()
            Me(Me.tableMinds_Pagos_Avio.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.SucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSucursalNull()
            Me(Me.tableMinds_Pagos_Avio.SucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLetraNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.LetraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLetraNull()
            Me(Me.tableMinds_Pagos_Avio.LetraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsChequeNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.ChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetChequeNull()
            Me(Me.tableMinds_Pagos_Avio.ChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFechaTerminacionNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.FechaTerminacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFechaTerminacionNull()
            Me(Me.tableMinds_Pagos_Avio.FechaTerminacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEsEfectivoNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.EsEfectivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEsEfectivoNull()
            Me(Me.tableMinds_Pagos_Avio.EsEfectivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMINDSNull() As Boolean
            Return Me.IsNull(Me.tableMinds_Pagos_Avio.MINDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMINDSNull()
            Me(Me.tableMinds_Pagos_Avio.MINDSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PromotoresRow
        Inherits Global.System.Data.DataRow
        
        Private tablePromotores As PromotoresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePromotores = CType(Me.Table,PromotoresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Promotor() As String
            Get
                Return CType(Me(Me.tablePromotores.PromotorColumn),String)
            End Get
            Set
                Me(Me.tablePromotores.PromotorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DescPromotor() As String
            Get
                Return CType(Me(Me.tablePromotores.DescPromotorColumn),String)
            End Get
            Set
                Me(Me.tablePromotores.DescPromotorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property APaterno() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.APaternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'APaterno' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.APaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AMaterno() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.AMaternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AMaterno' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.AMaternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StatusPromotor() As String
            Get
                Return CType(Me(Me.tablePromotores.StatusPromotorColumn),String)
            End Get
            Set
                Me(Me.tablePromotores.StatusPromotorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Iniciales() As String
            Get
                Return CType(Me(Me.tablePromotores.InicialesColumn),String)
            End Get
            Set
                Me(Me.tablePromotores.InicialesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NumEmpleado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.NumEmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumEmpleado' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.NumEmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDPlaza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.IDPlazaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDPlaza' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.IDPlazaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaCarga() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.FechaCargaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaCarga' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.FechaCargaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nacionalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.NacionalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nacionalidad' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.NacionalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Minds() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePromotores.MindsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Minds' de la tabla 'Promotores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotores.MindsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNombreNull()
            Me(Me.tablePromotores.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAPaternoNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.APaternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAPaternoNull()
            Me(Me.tablePromotores.APaternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAMaternoNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.AMaternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAMaternoNull()
            Me(Me.tablePromotores.AMaternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNumEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.NumEmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNumEmpleadoNull()
            Me(Me.tablePromotores.NumEmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDPlazaNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.IDPlazaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDPlazaNull()
            Me(Me.tablePromotores.IDPlazaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFechaCargaNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.FechaCargaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFechaCargaNull()
            Me(Me.tablePromotores.FechaCargaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNacionalidadNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.NacionalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNacionalidadNull()
            Me(Me.tablePromotores.NacionalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPuestoNull()
            Me(Me.tablePromotores.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMindsNull() As Boolean
            Return Me.IsNull(Me.tablePromotores.MindsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMindsNull()
            Me(Me.tablePromotores.MindsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ReferenciadoEnEfectivoRow
        Inherits Global.System.Data.DataRow
        
        Private tableReferenciadoEnEfectivo As ReferenciadoEnEfectivoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReferenciadoEnEfectivo = CType(Me.Table,ReferenciadoEnEfectivoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableReferenciadoEnEfectivo.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anexo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.AnexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Anexo' de la tabla 'ReferenciadoEnEfectivo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'ReferenciadoEnEfectivo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Rerferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.RerferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Rerferencia' de la tabla 'ReferenciadoEnEfectivo' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.RerferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'ReferenciadoEnEfectivo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.BancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Banco' de la tabla 'ReferenciadoEnEfectivo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FechaMoV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.FechaMoVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaMoV' de la tabla 'ReferenciadoEnEfectivo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.FechaMoVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RerferenciaORG() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.RerferenciaORGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RerferenciaORG' de la tabla 'ReferenciadoEnEfectivo' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.RerferenciaORGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RerferenciaORG1() As String
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.RerferenciaORG1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RerferenciaORG1' de la tabla 'ReferenciadoEnEfectivo' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.RerferenciaORG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ImporteEfectivo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReferenciadoEnEfectivo.ImporteEfectivoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteEfectivo' de la tabla 'ReferenciadoEnEfectivo' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReferenciadoEnEfectivo.ImporteEfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnexoNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.AnexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnexoNull()
            Me(Me.tableReferenciadoEnEfectivo.AnexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFechaNull()
            Me(Me.tableReferenciadoEnEfectivo.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRerferenciaNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.RerferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRerferenciaNull()
            Me(Me.tableReferenciadoEnEfectivo.RerferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetImporteNull()
            Me(Me.tableReferenciadoEnEfectivo.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBancoNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.BancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBancoNull()
            Me(Me.tableReferenciadoEnEfectivo.BancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFechaMoVNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.FechaMoVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFechaMoVNull()
            Me(Me.tableReferenciadoEnEfectivo.FechaMoVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRerferenciaORGNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.RerferenciaORGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRerferenciaORGNull()
            Me(Me.tableReferenciadoEnEfectivo.RerferenciaORGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRerferenciaORG1Null() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.RerferenciaORG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRerferenciaORG1Null()
            Me(Me.tableReferenciadoEnEfectivo.RerferenciaORG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsImporteEfectivoNull() As Boolean
            Return Me.IsNull(Me.tableReferenciadoEnEfectivo.ImporteEfectivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetImporteEfectivoNull()
            Me(Me.tableReferenciadoEnEfectivo.ImporteEfectivoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ClientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ClientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AnexosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AnexosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AnexosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AnexosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AviosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AviosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AviosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AviosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Vw_MAXfecVenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Vw_MAXfecVenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Vw_MAXfecVenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Vw_MAXfecVenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EdoctavRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EdoctavRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EdoctavRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EdoctavRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Minds_Pagos_AvioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Minds_Pagos_AvioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Minds_Pagos_AvioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Minds_Pagos_AvioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PromotoresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PromotoresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PromotoresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PromotoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ReferenciadoEnEfectivoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReferenciadoEnEfectivoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ReferenciadoEnEfectivoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ReferenciadoEnEfectivoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ProductionDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClientesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Clientes"
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("Descr", "Descr")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Sucursal", "Sucursal")
            tableMapping.ColumnMappings.Add("Promo", "Promo")
            tableMapping.ColumnMappings.Add("Gestor", "Gestor")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Colonia", "Colonia")
            tableMapping.ColumnMappings.Add("Delegacion", "Delegacion")
            tableMapping.ColumnMappings.Add("Copos", "Copos")
            tableMapping.ColumnMappings.Add("Telef1", "Telef1")
            tableMapping.ColumnMappings.Add("Telef2", "Telef2")
            tableMapping.ColumnMappings.Add("Telef3", "Telef3")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Fecha1", "Fecha1")
            tableMapping.ColumnMappings.Add("Giro", "Giro")
            tableMapping.ColumnMappings.Add("Plaza", "Plaza")
            tableMapping.ColumnMappings.Add("RFC", "RFC")
            tableMapping.ColumnMappings.Add("CURP", "CURP")
            tableMapping.ColumnMappings.Add("EMail1", "EMail1")
            tableMapping.ColumnMappings.Add("EMail2", "EMail2")
            tableMapping.ColumnMappings.Add("Banco", "Banco")
            tableMapping.ColumnMappings.Add("CuentaBancomer", "CuentaBancomer")
            tableMapping.ColumnMappings.Add("CuentaCLABE", "CuentaCLABE")
            tableMapping.ColumnMappings.Add("GeneClie", "GeneClie")
            tableMapping.ColumnMappings.Add("Nomrepr", "Nomrepr")
            tableMapping.ColumnMappings.Add("Generepr", "Generepr")
            tableMapping.ColumnMappings.Add("Poderepr", "Poderepr")
            tableMapping.ColumnMappings.Add("Nomrepr2", "Nomrepr2")
            tableMapping.ColumnMappings.Add("Generep2", "Generep2")
            tableMapping.ColumnMappings.Add("Poderep2", "Poderep2")
            tableMapping.ColumnMappings.Add("Coac", "Coac")
            tableMapping.ColumnMappings.Add("Tipcoac", "Tipcoac")
            tableMapping.ColumnMappings.Add("Nomcoac", "Nomcoac")
            tableMapping.ColumnMappings.Add("Genecoac", "Genecoac")
            tableMapping.ColumnMappings.Add("Nomrcoac", "Nomrcoac")
            tableMapping.ColumnMappings.Add("Genercoa", "Genercoa")
            tableMapping.ColumnMappings.Add("Podercoa", "Podercoa")
            tableMapping.ColumnMappings.Add("Obli", "Obli")
            tableMapping.ColumnMappings.Add("TipoObli", "TipoObli")
            tableMapping.ColumnMappings.Add("NomObli", "NomObli")
            tableMapping.ColumnMappings.Add("GeneObli", "GeneObli")
            tableMapping.ColumnMappings.Add("NomrObl", "NomrObl")
            tableMapping.ColumnMappings.Add("GenerObl", "GenerObl")
            tableMapping.ColumnMappings.Add("PoderObl", "PoderObl")
            tableMapping.ColumnMappings.Add("Aval1", "Aval1")
            tableMapping.ColumnMappings.Add("Tipaval1", "Tipaval1")
            tableMapping.ColumnMappings.Add("Nomaval1", "Nomaval1")
            tableMapping.ColumnMappings.Add("Geneava1", "Geneava1")
            tableMapping.ColumnMappings.Add("Nomrava1", "Nomrava1")
            tableMapping.ColumnMappings.Add("Generav1", "Generav1")
            tableMapping.ColumnMappings.Add("Poderav1", "Poderav1")
            tableMapping.ColumnMappings.Add("Aval2", "Aval2")
            tableMapping.ColumnMappings.Add("Tipaval2", "Tipaval2")
            tableMapping.ColumnMappings.Add("Nomaval2", "Nomaval2")
            tableMapping.ColumnMappings.Add("GeneAva2", "GeneAva2")
            tableMapping.ColumnMappings.Add("Nomrava2", "Nomrava2")
            tableMapping.ColumnMappings.Add("Generav2", "Generav2")
            tableMapping.ColumnMappings.Add("Poderav2", "Poderav2")
            tableMapping.ColumnMappings.Add("Agrupa", "Agrupa")
            tableMapping.ColumnMappings.Add("SegVida", "SegVida")
            tableMapping.ColumnMappings.Add("TasaIVACliente", "TasaIVACliente")
            tableMapping.ColumnMappings.Add("CuentadePago1", "CuentadePago1")
            tableMapping.ColumnMappings.Add("FormadePago1", "FormadePago1")
            tableMapping.ColumnMappings.Add("CuentadePago2", "CuentadePago2")
            tableMapping.ColumnMappings.Add("FormadePago2", "FormadePago2")
            tableMapping.ColumnMappings.Add("CuentadePago3", "CuentadePago3")
            tableMapping.ColumnMappings.Add("FormadePago3", "FormadePago3")
            tableMapping.ColumnMappings.Add("CuentadePago4", "CuentadePago4")
            tableMapping.ColumnMappings.Add("FormadePago4", "FormadePago4")
            tableMapping.ColumnMappings.Add("NombreCliente", "NombreCliente")
            tableMapping.ColumnMappings.Add("ApellidoPaterno", "ApellidoPaterno")
            tableMapping.ColumnMappings.Add("ApellidoMaterno", "ApellidoMaterno")
            tableMapping.ColumnMappings.Add("Genero", "Genero")
            tableMapping.ColumnMappings.Add("Autoriza", "Autoriza")
            tableMapping.ColumnMappings.Add("siebel", "siebel")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Clientes] ([Cliente], [Descr], [Tipo], [Sucursal], [Promo], [Gestor]"& _ 
                ", [Calle], [Colonia], [Delegacion], [Copos], [Telef1], [Telef2], [Telef3], [Fax]"& _ 
                ", [Fecha1], [Giro], [Plaza], [RFC], [CURP], [EMail1], [EMail2], [Banco], [Cuenta"& _ 
                "Bancomer], [CuentaCLABE], [GeneClie], [Nomrepr], [Generepr], [Poderepr], [Nomrep"& _ 
                "r2], [Generep2], [Poderep2], [Coac], [Tipcoac], [Nomcoac], [Genecoac], [Nomrcoac"& _ 
                "], [Genercoa], [Podercoa], [Obli], [TipoObli], [NomObli], [GeneObli], [NomrObl],"& _ 
                " [GenerObl], [PoderObl], [Aval1], [Tipaval1], [Nomaval1], [Geneava1], [Nomrava1]"& _ 
                ", [Generav1], [Poderav1], [Aval2], [Tipaval2], [Nomaval2], [GeneAva2], [Nomrava2"& _ 
                "], [Generav2], [Poderav2], [Agrupa], [SegVida], [TasaIVACliente], [CuentadePago1"& _ 
                "], [FormadePago1], [CuentadePago2], [FormadePago2], [CuentadePago3], [FormadePag"& _ 
                "o3], [CuentadePago4], [FormadePago4], [NombreCliente], [ApellidoPaterno], [Apell"& _ 
                "idoMaterno], [Genero], [Autoriza], [siebel]) VALUES (@Cliente, @Descr, @Tipo, @S"& _ 
                "ucursal, @Promo, @Gestor, @Calle, @Colonia, @Delegacion, @Copos, @Telef1, @Telef"& _ 
                "2, @Telef3, @Fax, @Fecha1, @Giro, @Plaza, @RFC, @CURP, @EMail1, @EMail2, @Banco,"& _ 
                " @CuentaBancomer, @CuentaCLABE, @GeneClie, @Nomrepr, @Generepr, @Poderepr, @Nomr"& _ 
                "epr2, @Generep2, @Poderep2, @Coac, @Tipcoac, @Nomcoac, @Genecoac, @Nomrcoac, @Ge"& _ 
                "nercoa, @Podercoa, @Obli, @TipoObli, @NomObli, @GeneObli, @NomrObl, @GenerObl, @"& _ 
                "PoderObl, @Aval1, @Tipaval1, @Nomaval1, @Geneava1, @Nomrava1, @Generav1, @Podera"& _ 
                "v1, @Aval2, @Tipaval2, @Nomaval2, @GeneAva2, @Nomrava2, @Generav2, @Poderav2, @A"& _ 
                "grupa, @SegVida, @TasaIVACliente, @CuentadePago1, @FormadePago1, @CuentadePago2,"& _ 
                " @FormadePago2, @CuentadePago3, @FormadePago3, @CuentadePago4, @FormadePago4, @N"& _ 
                "ombreCliente, @ApellidoPaterno, @ApellidoMaterno, @Genero, @Autoriza, @siebel)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cliente", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Descr", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sucursal", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sucursal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Promo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Promo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gestor", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gestor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calle", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Calle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colonia", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Colonia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delegacion", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delegacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Copos", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Copos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telef1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telef1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telef2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telef2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telef3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telef3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fax", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Giro", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Giro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Plaza", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Plaza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RFC", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RFC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURP", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMail2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMail2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentaBancomer", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentaBancomer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentaCLABE", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentaCLABE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GeneClie", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GeneClie", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomrepr", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomrepr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Generepr", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Generepr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Poderepr", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Poderepr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomrepr2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomrepr2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Generep2", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Generep2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Poderep2", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Poderep2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coac", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipcoac", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipcoac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomcoac", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomcoac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Genecoac", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Genecoac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomrcoac", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomrcoac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Genercoa", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Genercoa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Podercoa", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Podercoa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Obli", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Obli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoObli", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoObli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomObli", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomObli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GeneObli", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GeneObli", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NomrObl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NomrObl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GenerObl", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GenerObl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PoderObl", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PoderObl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aval1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aval1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipaval1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipaval1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomaval1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomaval1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Geneava1", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Geneava1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomrava1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomrava1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Generav1", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Generav1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Poderav1", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Poderav1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aval2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aval2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipaval2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipaval2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomaval2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomaval2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GeneAva2", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GeneAva2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomrava2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomrava2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Generav2", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Generav2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Poderav2", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Poderav2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Agrupa", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Agrupa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegVida", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegVida", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TasaIVACliente", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "TasaIVACliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentadePago1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentadePago1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormadePago1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormadePago1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentadePago2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentadePago2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormadePago2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormadePago2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentadePago3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentadePago3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormadePago3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormadePago3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentadePago4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentadePago4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormadePago4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormadePago4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreCliente", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreCliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ApellidoPaterno", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ApellidoPaterno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ApellidoMaterno", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ApellidoMaterno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Genero", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Genero", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Autoriza", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Autoriza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@siebel", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "siebel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Cliente, Descr, Tipo, Sucursal, Promo, Gestor, Calle, Colonia, Dele"& _ 
                "gacion, Copos, Telef1, Telef2, Telef3, Fax, Fecha1, Giro, Plaza, RFC, CURP, EMai"& _ 
                "l1, EMail2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Banco, CuentaBancomer, CuentaCLABE, GeneC"& _ 
                "lie, Nomrepr, Generepr, Poderepr, Nomrepr2, Generep2, Poderep2, Coac, Tipcoac, N"& _ 
                "omcoac, Genecoac, Nomrcoac, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Genercoa, Podercoa, Obli,"& _ 
                " TipoObli, NomObli, GeneObli, NomrObl, GenerObl, PoderObl, Aval1, Tipaval1, Noma"& _ 
                "val1, Geneava1, Nomrava1, Generav1, Poderav1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Aval2, "& _ 
                "Tipaval2, Nomaval2, GeneAva2, Nomrava2, Generav2, Poderav2, Agrupa, SegVida, Tas"& _ 
                "aIVACliente, CuentadePago1, FormadePago1, CuentadePago2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    FormadePago2, CuentadePago3, FormadePago3, CuentadePago4, FormadePago4, Nomb"& _ 
                "reCliente, ApellidoPaterno, ApellidoMaterno, Genero, Autoriza, siebel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "       Clientes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Cliente, Descr, Tipo, Sucursal, Promo, Gestor, Calle, Colonia, Dele"& _ 
                "gacion, Copos, Telef1, Telef2, Telef3, Fax, Fecha1, Giro, Plaza, RFC, CURP, EMai"& _ 
                "l1, EMail2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Banco, CuentaBancomer, CuentaCLABE, GeneC"& _ 
                "lie, Nomrepr, Generepr, Poderepr, Nomrepr2, Generep2, Poderep2, Coac, Tipcoac, N"& _ 
                "omcoac, Genecoac, Nomrcoac, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Genercoa, Podercoa, Obli,"& _ 
                " TipoObli, NomObli, GeneObli, NomrObl, GenerObl, PoderObl, Aval1, Tipaval1, Noma"& _ 
                "val1, Geneava1, Nomrava1, Generav1, Poderav1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Aval2, "& _ 
                "Tipaval2, Nomaval2, GeneAva2, Nomrava2, Generav2, Poderav2, Agrupa, SegVida, Tas"& _ 
                "aIVACliente, CuentadePago1, FormadePago1, CuentadePago2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    FormadePago2, CuentadePago3, FormadePago3, CuentadePago4, FormadePago4, Nomb"& _ 
                "reCliente, ApellidoPaterno, ApellidoMaterno, Genero, Autoriza, siebel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "       Clientes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (siebel = 0) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (siebel "& _ 
                "IS NULL)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       Clientes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                siebel = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Cliente = @cl"& _ 
                "iente)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cliente", Global.System.Data.SqlDbType.NChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "Cliente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillTodos(ByVal dataTable As ProductionDataSet.ClientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductionDataSet.ClientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductionDataSet.ClientesDataTable = New ProductionDataSet.ClientesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillNew(ByVal dataTable As ProductionDataSet.ClientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.ClientesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Clientes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Cliente As String,  _
                    ByVal Descr As String,  _
                    ByVal Tipo As String,  _
                    ByVal Sucursal As String,  _
                    ByVal Promo As String,  _
                    ByVal Gestor As String,  _
                    ByVal Calle As String,  _
                    ByVal Colonia As String,  _
                    ByVal Delegacion As String,  _
                    ByVal Copos As String,  _
                    ByVal Telef1 As String,  _
                    ByVal Telef2 As String,  _
                    ByVal Telef3 As String,  _
                    ByVal Fax As String,  _
                    ByVal Fecha1 As String,  _
                    ByVal Giro As String,  _
                    ByVal Plaza As String,  _
                    ByVal RFC As String,  _
                    ByVal CURP As String,  _
                    ByVal EMail1 As String,  _
                    ByVal EMail2 As String,  _
                    ByVal Banco As String,  _
                    ByVal CuentaBancomer As String,  _
                    ByVal CuentaCLABE As String,  _
                    ByVal GeneClie As String,  _
                    ByVal Nomrepr As String,  _
                    ByVal Generepr As String,  _
                    ByVal Poderepr As String,  _
                    ByVal Nomrepr2 As String,  _
                    ByVal Generep2 As String,  _
                    ByVal Poderep2 As String,  _
                    ByVal Coac As String,  _
                    ByVal Tipcoac As String,  _
                    ByVal Nomcoac As String,  _
                    ByVal Genecoac As String,  _
                    ByVal Nomrcoac As String,  _
                    ByVal Genercoa As String,  _
                    ByVal Podercoa As String,  _
                    ByVal Obli As String,  _
                    ByVal TipoObli As String,  _
                    ByVal NomObli As String,  _
                    ByVal GeneObli As String,  _
                    ByVal NomrObl As String,  _
                    ByVal GenerObl As String,  _
                    ByVal PoderObl As String,  _
                    ByVal Aval1 As String,  _
                    ByVal Tipaval1 As String,  _
                    ByVal Nomaval1 As String,  _
                    ByVal Geneava1 As String,  _
                    ByVal Nomrava1 As String,  _
                    ByVal Generav1 As String,  _
                    ByVal Poderav1 As String,  _
                    ByVal Aval2 As String,  _
                    ByVal Tipaval2 As String,  _
                    ByVal Nomaval2 As String,  _
                    ByVal GeneAva2 As String,  _
                    ByVal Nomrava2 As String,  _
                    ByVal Generav2 As String,  _
                    ByVal Poderav2 As String,  _
                    ByVal Agrupa As String,  _
                    ByVal SegVida As String,  _
                    ByVal TasaIVACliente As Decimal,  _
                    ByVal CuentadePago1 As String,  _
                    ByVal FormadePago1 As String,  _
                    ByVal CuentadePago2 As String,  _
                    ByVal FormadePago2 As String,  _
                    ByVal CuentadePago3 As String,  _
                    ByVal FormadePago3 As String,  _
                    ByVal CuentadePago4 As String,  _
                    ByVal FormadePago4 As String,  _
                    ByVal NombreCliente As String,  _
                    ByVal ApellidoPaterno As String,  _
                    ByVal ApellidoMaterno As String,  _
                    ByVal Genero As String,  _
                    ByVal Autoriza As String,  _
                    ByVal siebel As Global.System.Nullable(Of Boolean)) As Integer
            If (Cliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cliente")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cliente,String)
            End If
            If (Descr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Descr")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descr,String)
            End If
            If (Tipo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipo")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Tipo,String)
            End If
            If (Sucursal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Sucursal,String)
            End If
            If (Promo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Promo")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Promo,String)
            End If
            If (Gestor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Gestor")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Gestor,String)
            End If
            If (Calle Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Calle")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Calle,String)
            End If
            If (Colonia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Colonia")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Colonia,String)
            End If
            If (Delegacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Delegacion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Delegacion,String)
            End If
            If (Copos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Copos")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Copos,String)
            End If
            If (Telef1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Telef1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Telef1,String)
            End If
            If (Telef2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Telef2")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Telef2,String)
            End If
            If (Telef3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Telef3")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Telef3,String)
            End If
            If (Fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fax")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Fax,String)
            End If
            If (Fecha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fecha1")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Fecha1,String)
            End If
            If (Giro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Giro")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Giro,String)
            End If
            If (Plaza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Plaza")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Plaza,String)
            End If
            If (RFC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RFC")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RFC,String)
            End If
            If (CURP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CURP,String)
            End If
            If (EMail1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMail1")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EMail1,String)
            End If
            If (EMail2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMail2")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(EMail2,String)
            End If
            If (Banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Banco")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Banco,String)
            End If
            If (CuentaBancomer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentaBancomer")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CuentaBancomer,String)
            End If
            If (CuentaCLABE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentaCLABE")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CuentaCLABE,String)
            End If
            If (GeneClie Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GeneClie")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(GeneClie,String)
            End If
            If (Nomrepr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomrepr")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Nomrepr,String)
            End If
            If (Generepr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Generepr")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Generepr,String)
            End If
            If (Poderepr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Poderepr")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Poderepr,String)
            End If
            If (Nomrepr2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomrepr2")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Nomrepr2,String)
            End If
            If (Generep2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Generep2")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Generep2,String)
            End If
            If (Poderep2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Poderep2")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Poderep2,String)
            End If
            If (Coac Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Coac")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Coac,String)
            End If
            If (Tipcoac Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipcoac")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Tipcoac,String)
            End If
            If (Nomcoac Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomcoac")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Nomcoac,String)
            End If
            If (Genecoac Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Genecoac")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Genecoac,String)
            End If
            If (Nomrcoac Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomrcoac")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Nomrcoac,String)
            End If
            If (Genercoa Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Genercoa")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Genercoa,String)
            End If
            If (Podercoa Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Podercoa")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Podercoa,String)
            End If
            If (Obli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Obli")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Obli,String)
            End If
            If (TipoObli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoObli")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(TipoObli,String)
            End If
            If (NomObli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NomObli")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(NomObli,String)
            End If
            If (GeneObli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GeneObli")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(GeneObli,String)
            End If
            If (NomrObl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NomrObl")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(NomrObl,String)
            End If
            If (GenerObl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GenerObl")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(GenerObl,String)
            End If
            If (PoderObl Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PoderObl")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PoderObl,String)
            End If
            If (Aval1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aval1")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Aval1,String)
            End If
            If (Tipaval1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipaval1")
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Tipaval1,String)
            End If
            If (Nomaval1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomaval1")
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Nomaval1,String)
            End If
            If (Geneava1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Geneava1")
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Geneava1,String)
            End If
            If (Nomrava1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomrava1")
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Nomrava1,String)
            End If
            If (Generav1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Generav1")
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(Generav1,String)
            End If
            If (Poderav1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Poderav1")
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(Poderav1,String)
            End If
            If (Aval2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aval2")
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(Aval2,String)
            End If
            If (Tipaval2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipaval2")
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(Tipaval2,String)
            End If
            If (Nomaval2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomaval2")
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(Nomaval2,String)
            End If
            If (GeneAva2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GeneAva2")
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(GeneAva2,String)
            End If
            If (Nomrava2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomrava2")
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(Nomrava2,String)
            End If
            If (Generav2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Generav2")
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(Generav2,String)
            End If
            If (Poderav2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Poderav2")
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Poderav2,String)
            End If
            If (Agrupa Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Agrupa")
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(Agrupa,String)
            End If
            If (SegVida Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(SegVida,String)
            End If
            Me.Adapter.InsertCommand.Parameters(61).Value = CType(TasaIVACliente,Decimal)
            If (CuentadePago1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentadePago1")
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(CuentadePago1,String)
            End If
            If (FormadePago1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormadePago1")
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(FormadePago1,String)
            End If
            If (CuentadePago2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentadePago2")
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(CuentadePago2,String)
            End If
            If (FormadePago2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormadePago2")
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(FormadePago2,String)
            End If
            If (CuentadePago3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentadePago3")
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(CuentadePago3,String)
            End If
            If (FormadePago3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormadePago3")
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(FormadePago3,String)
            End If
            If (CuentadePago4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentadePago4")
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(CuentadePago4,String)
            End If
            If (FormadePago4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormadePago4")
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(FormadePago4,String)
            End If
            If (NombreCliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreCliente")
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(NombreCliente,String)
            End If
            If (ApellidoPaterno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ApellidoPaterno")
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(ApellidoPaterno,String)
            End If
            If (ApellidoMaterno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ApellidoMaterno")
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(ApellidoMaterno,String)
            End If
            If (Genero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Genero")
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(Genero,String)
            End If
            If (Autoriza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Autoriza")
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(Autoriza,String)
            End If
            If (siebel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(siebel.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMinds(ByVal cliente As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (cliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cliente")
            Else
                command.Parameters(0).Value = CType(cliente,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AnexosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Anexos"
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Flcan", "Flcan")
            tableMapping.ColumnMappings.Add("Vencida", "Vencida")
            tableMapping.ColumnMappings.Add("Garantia", "Garantia")
            tableMapping.ColumnMappings.Add("Referencia", "Referencia")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("Impeq", "Impeq")
            tableMapping.ColumnMappings.Add("Segeq", "Segeq")
            tableMapping.ColumnMappings.Add("Finse", "Finse")
            tableMapping.ColumnMappings.Add("Plazo", "Plazo")
            tableMapping.ColumnMappings.Add("Plaseg", "Plaseg")
            tableMapping.ColumnMappings.Add("Ivaeq", "Ivaeq")
            tableMapping.ColumnMappings.Add("Ivase", "Ivase")
            tableMapping.ColumnMappings.Add("Porieq", "Porieq")
            tableMapping.ColumnMappings.Add("PorInt", "PorInt")
            tableMapping.ColumnMappings.Add("Amorin", "Amorin")
            tableMapping.ColumnMappings.Add("IvaAmorin", "IvaAmorin")
            tableMapping.ColumnMappings.Add("Tippe", "Tippe")
            tableMapping.ColumnMappings.Add("Tipta", "Tipta")
            tableMapping.ColumnMappings.Add("Tasas", "Tasas")
            tableMapping.ColumnMappings.Add("AcumulaIntereses", "AcumulaIntereses")
            tableMapping.ColumnMappings.Add("Tipar", "Tipar")
            tableMapping.ColumnMappings.Add("Forca", "Forca")
            tableMapping.ColumnMappings.Add("Tipmen", "Tipmen")
            tableMapping.ColumnMappings.Add("Difer", "Difer")
            tableMapping.ColumnMappings.Add("RtasD", "RtasD")
            tableMapping.ColumnMappings.Add("ImpRD", "ImpRD")
            tableMapping.ColumnMappings.Add("IvaRD", "IvaRD")
            tableMapping.ColumnMappings.Add("Porco", "Porco")
            tableMapping.ColumnMappings.Add("Comis", "Comis")
            tableMapping.ColumnMappings.Add("Porop", "Porop")
            tableMapping.ColumnMappings.Add("Fechacon", "Fechacon")
            tableMapping.ColumnMappings.Add("Fvenc", "Fvenc")
            tableMapping.ColumnMappings.Add("Fondeo", "Fondeo")
            tableMapping.ColumnMappings.Add("DepNafin", "DepNafin")
            tableMapping.ColumnMappings.Add("Critas", "Critas")
            tableMapping.ColumnMappings.Add("Tipeq", "Tipeq")
            tableMapping.ColumnMappings.Add("Gastos", "Gastos")
            tableMapping.ColumnMappings.Add("IvaGastos", "IvaGastos")
            tableMapping.ColumnMappings.Add("Tipmon", "Tipmon")
            tableMapping.ColumnMappings.Add("Mensu", "Mensu")
            tableMapping.ColumnMappings.Add("Tasmor", "Tasmor")
            tableMapping.ColumnMappings.Add("Taspen", "Taspen")
            tableMapping.ColumnMappings.Add("Doc1", "Doc1")
            tableMapping.ColumnMappings.Add("Doc2", "Doc2")
            tableMapping.ColumnMappings.Add("Doc3", "Doc3")
            tableMapping.ColumnMappings.Add("Prendaria", "Prendaria")
            tableMapping.ColumnMappings.Add("Prenda", "Prenda")
            tableMapping.ColumnMappings.Add("Observa", "Observa")
            tableMapping.ColumnMappings.Add("Fechafin", "Fechafin")
            tableMapping.ColumnMappings.Add("Factor", "Factor")
            tableMapping.ColumnMappings.Add("Piso", "Piso")
            tableMapping.ColumnMappings.Add("Techo", "Techo")
            tableMapping.ColumnMappings.Add("Tasamax", "Tasamax")
            tableMapping.ColumnMappings.Add("Adeudo", "Adeudo")
            tableMapping.ColumnMappings.Add("RD", "RD")
            tableMapping.ColumnMappings.Add("ImpDG", "ImpDG")
            tableMapping.ColumnMappings.Add("IvaDG", "IvaDG")
            tableMapping.ColumnMappings.Add("Derechos", "Derechos")
            tableMapping.ColumnMappings.Add("DG", "DG")
            tableMapping.ColumnMappings.Add("GHipotec", "GHipotec")
            tableMapping.ColumnMappings.Add("Lugar", "Lugar")
            tableMapping.ColumnMappings.Add("Notaria", "Notaria")
            tableMapping.ColumnMappings.Add("Escritura", "Escritura")
            tableMapping.ColumnMappings.Add("Scaneo", "Scaneo")
            tableMapping.ColumnMappings.Add("Archivo", "Archivo")
            tableMapping.ColumnMappings.Add("Servicio", "Servicio")
            tableMapping.ColumnMappings.Add("IVAServicio", "IVAServicio")
            tableMapping.ColumnMappings.Add("Fecha_Pago", "Fecha_Pago")
            tableMapping.ColumnMappings.Add("Cobertura", "Cobertura")
            tableMapping.ColumnMappings.Add("Pagos", "Pagos")
            tableMapping.ColumnMappings.Add("TipoFrecuencia", "TipoFrecuencia")
            tableMapping.ColumnMappings.Add("ValorFrecuencia", "ValorFrecuencia")
            tableMapping.ColumnMappings.Add("Amortizaciones", "Amortizaciones")
            tableMapping.ColumnMappings.Add("Banco", "Banco")
            tableMapping.ColumnMappings.Add("CuentaCLABE", "CuentaCLABE")
            tableMapping.ColumnMappings.Add("Autoriza", "Autoriza")
            tableMapping.ColumnMappings.Add("Titular", "Titular")
            tableMapping.ColumnMappings.Add("idCredito", "idCredito")
            tableMapping.ColumnMappings.Add("Minds", "Minds")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Anexos] ([Anexo], [Flcan], [Vencida], [Garantia], [Referencia], [Cli"& _ 
                "ente], [Impeq], [Segeq], [Finse], [Plazo], [Plaseg], [Ivaeq], [Ivase], [Porieq],"& _ 
                " [PorInt], [Amorin], [IvaAmorin], [Tippe], [Tipta], [Tasas], [AcumulaIntereses],"& _ 
                " [Tipar], [Forca], [Tipmen], [Difer], [RtasD], [ImpRD], [IvaRD], [Porco], [Comis"& _ 
                "], [Porop], [Fechacon], [Fvenc], [Fondeo], [DepNafin], [Critas], [Tipeq], [Gasto"& _ 
                "s], [IvaGastos], [Tipmon], [Mensu], [Tasmor], [Taspen], [Doc1], [Doc2], [Doc3], "& _ 
                "[Prendaria], [Prenda], [Observa], [Fechafin], [Factor], [Piso], [Techo], [Tasama"& _ 
                "x], [Adeudo], [RD], [ImpDG], [IvaDG], [Derechos], [DG], [GHipotec], [Lugar], [No"& _ 
                "taria], [Escritura], [Scaneo], [Archivo], [Servicio], [IVAServicio], [Fecha_Pago"& _ 
                "], [Cobertura], [Pagos], [TipoFrecuencia], [ValorFrecuencia], [Amortizaciones], "& _ 
                "[Banco], [CuentaCLABE], [Autoriza], [Titular], [idCredito], [Minds]) VALUES (@An"& _ 
                "exo, @Flcan, @Vencida, @Garantia, @Referencia, @Cliente, @Impeq, @Segeq, @Finse,"& _ 
                " @Plazo, @Plaseg, @Ivaeq, @Ivase, @Porieq, @PorInt, @Amorin, @IvaAmorin, @Tippe,"& _ 
                " @Tipta, @Tasas, @AcumulaIntereses, @Tipar, @Forca, @Tipmen, @Difer, @RtasD, @Im"& _ 
                "pRD, @IvaRD, @Porco, @Comis, @Porop, @Fechacon, @Fvenc, @Fondeo, @DepNafin, @Cri"& _ 
                "tas, @Tipeq, @Gastos, @IvaGastos, @Tipmon, @Mensu, @Tasmor, @Taspen, @Doc1, @Doc"& _ 
                "2, @Doc3, @Prendaria, @Prenda, @Observa, @Fechafin, @Factor, @Piso, @Techo, @Tas"& _ 
                "amax, @Adeudo, @RD, @ImpDG, @IvaDG, @Derechos, @DG, @GHipotec, @Lugar, @Notaria,"& _ 
                " @Escritura, @Scaneo, @Archivo, @Servicio, @IVAServicio, @Fecha_Pago, @Cobertura"& _ 
                ", @Pagos, @TipoFrecuencia, @ValorFrecuencia, @Amortizaciones, @Banco, @CuentaCLA"& _ 
                "BE, @Autoriza, @Titular, @idCredito, @Minds)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flcan", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flcan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vencida", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vencida", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garantia", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garantia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Referencia", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Referencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cliente", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Impeq", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Impeq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Segeq", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Segeq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Finse", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Finse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Plazo", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Plazo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Plaseg", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Plaseg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ivaeq", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Ivaeq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ivase", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Ivase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Porieq", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "Porieq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorInt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "PorInt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amorin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Amorin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IvaAmorin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IvaAmorin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tippe", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tippe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipta", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tasas", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "Tasas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AcumulaIntereses", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AcumulaIntereses", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipar", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Forca", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Forca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipmen", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipmen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Difer", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Difer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RtasD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RtasD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImpRD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImpRD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IvaRD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IvaRD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Porco", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Porco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comis", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Comis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Porop", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Porop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fechacon", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fechacon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fvenc", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fvenc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fondeo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fondeo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepNafin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "DepNafin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Critas", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Critas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipeq", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipeq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gastos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Gastos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IvaGastos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IvaGastos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipmon", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipmon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mensu", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Mensu", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tasmor", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Tasmor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Taspen", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Taspen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Doc1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Doc1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Doc2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Doc2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Doc3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Doc3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prendaria", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prendaria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prenda", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prenda", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observa", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Observa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fechafin", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fechafin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Factor", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Factor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Piso", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Piso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Techo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Techo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tasamax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "Tasamax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adeudo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adeudo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RD", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImpDG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImpDG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IvaDG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IvaDG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Derechos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Derechos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DG", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GHipotec", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GHipotec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lugar", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Lugar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notaria", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notaria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Escritura", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Escritura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Scaneo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Scaneo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Archivo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Archivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Servicio", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Servicio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IVAServicio", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IVAServicio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Pago", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Pago", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cobertura", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cobertura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pagos", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pagos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoFrecuencia", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoFrecuencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ValorFrecuencia", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ValorFrecuencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amortizaciones", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amortizaciones", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CuentaCLABE", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CuentaCLABE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Autoriza", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Autoriza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Titular", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Titular", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idCredito", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idCredito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Minds", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Minds", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Anexo, Flcan, Vencida, Garantia, Referencia, Cliente, Impeq, Segeq,"& _ 
                " Finse, Plazo, Plaseg, Ivaeq, Ivase, Porieq, PorInt, Amorin, IvaAmorin, Tippe, T"& _ 
                "ipta, Tasas, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AcumulaIntereses, Tipar, Forca, Tipmen, "& _ 
                "Difer, RtasD, ImpRD, IvaRD, Porco, Comis, Porop, Fechacon, Fvenc, Fondeo, DepNaf"& _ 
                "in, Critas, Tipeq, Gastos, IvaGastos, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Tipmon, Mensu, "& _ 
                "Tasmor, Taspen, Doc1, Doc2, Doc3, Prendaria, Prenda, Observa, Fechafin, Factor, "& _ 
                "Piso, Techo, Tasamax, Adeudo, RD, ImpDG, IvaDG, Derechos, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "     DG, GHipotec, Lugar, Notaria, Escritura, Scaneo, Archivo, Servicio, IVAServ"& _ 
                "icio, Fecha_Pago, Cobertura, Pagos, TipoFrecuencia, ValorFrecuencia, Amortizacio"& _ 
                "nes, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Banco, CuentaCLABE, Autoriza, Titular, idCredito"& _ 
                ", Minds"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Anexos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       Anexos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Minds = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Anexo = @Anexo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.AnexosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductionDataSet.AnexosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductionDataSet.AnexosDataTable = New ProductionDataSet.AnexosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.AnexosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Anexos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Anexo As String,  _
                    ByVal Flcan As String,  _
                    ByVal Vencida As String,  _
                    ByVal Garantia As String,  _
                    ByVal Referencia As String,  _
                    ByVal Cliente As String,  _
                    ByVal Impeq As Decimal,  _
                    ByVal Segeq As Decimal,  _
                    ByVal Finse As String,  _
                    ByVal Plazo As Byte,  _
                    ByVal Plaseg As Byte,  _
                    ByVal Ivaeq As Decimal,  _
                    ByVal Ivase As Decimal,  _
                    ByVal Porieq As Decimal,  _
                    ByVal PorInt As Decimal,  _
                    ByVal Amorin As Decimal,  _
                    ByVal IvaAmorin As Decimal,  _
                    ByVal Tippe As String,  _
                    ByVal Tipta As String,  _
                    ByVal Tasas As Decimal,  _
                    ByVal AcumulaIntereses As String,  _
                    ByVal Tipar As String,  _
                    ByVal Forca As String,  _
                    ByVal Tipmen As String,  _
                    ByVal Difer As Decimal,  _
                    ByVal RtasD As Byte,  _
                    ByVal ImpRD As Decimal,  _
                    ByVal IvaRD As Decimal,  _
                    ByVal Porco As Decimal,  _
                    ByVal Comis As Decimal,  _
                    ByVal Porop As Decimal,  _
                    ByVal Fechacon As String,  _
                    ByVal Fvenc As String,  _
                    ByVal Fondeo As String,  _
                    ByVal DepNafin As Decimal,  _
                    ByVal Critas As String,  _
                    ByVal Tipeq As String,  _
                    ByVal Gastos As Decimal,  _
                    ByVal IvaGastos As Decimal,  _
                    ByVal Tipmon As String,  _
                    ByVal Mensu As Decimal,  _
                    ByVal Tasmor As Decimal,  _
                    ByVal Taspen As Decimal,  _
                    ByVal Doc1 As String,  _
                    ByVal Doc2 As String,  _
                    ByVal Doc3 As String,  _
                    ByVal Prendaria As String,  _
                    ByVal Prenda As String,  _
                    ByVal Observa As String,  _
                    ByVal Fechafin As String,  _
                    ByVal Factor As Decimal,  _
                    ByVal Piso As Decimal,  _
                    ByVal Techo As Decimal,  _
                    ByVal Tasamax As Decimal,  _
                    ByVal Adeudo As String,  _
                    ByVal RD As Byte,  _
                    ByVal ImpDG As Decimal,  _
                    ByVal IvaDG As Decimal,  _
                    ByVal Derechos As Decimal,  _
                    ByVal DG As Byte,  _
                    ByVal GHipotec As String,  _
                    ByVal Lugar As String,  _
                    ByVal Notaria As String,  _
                    ByVal Escritura As String,  _
                    ByVal Scaneo As String,  _
                    ByVal Archivo As String,  _
                    ByVal Servicio As Decimal,  _
                    ByVal IVAServicio As Decimal,  _
                    ByVal Fecha_Pago As String,  _
                    ByVal Cobertura As String,  _
                    ByVal Pagos As Byte,  _
                    ByVal TipoFrecuencia As String,  _
                    ByVal ValorFrecuencia As Byte,  _
                    ByVal Amortizaciones As Byte,  _
                    ByVal Banco As String,  _
                    ByVal CuentaCLABE As String,  _
                    ByVal Autoriza As String,  _
                    ByVal Titular As String,  _
                    ByVal idCredito As String,  _
                    ByVal Minds As Global.System.Nullable(Of Boolean)) As Integer
            If (Anexo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Anexo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Flcan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flcan")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flcan,String)
            End If
            If (Vencida Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Vencida")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Vencida,String)
            End If
            If (Garantia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Garantia")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Garantia,String)
            End If
            If (Referencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Referencia")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Referencia,String)
            End If
            If (Cliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cliente")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cliente,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Impeq,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Segeq,Decimal)
            If (Finse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Finse")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Finse,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Plazo,Byte)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(Plaseg,Byte)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ivaeq,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(Ivase,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(Porieq,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(PorInt,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(Amorin,Decimal)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(IvaAmorin,Decimal)
            If (Tippe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tippe")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Tippe,String)
            End If
            If (Tipta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipta")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Tipta,String)
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(Tasas,Decimal)
            If (AcumulaIntereses Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AcumulaIntereses")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AcumulaIntereses,String)
            End If
            If (Tipar Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipar")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Tipar,String)
            End If
            If (Forca Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Forca")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Forca,String)
            End If
            If (Tipmen Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipmen")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Tipmen,String)
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(Difer,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(RtasD,Byte)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(ImpRD,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(IvaRD,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(Porco,Decimal)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(Comis,Decimal)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(Porop,Decimal)
            If (Fechacon Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fechacon")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Fechacon,String)
            End If
            If (Fvenc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fvenc")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Fvenc,String)
            End If
            If (Fondeo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fondeo")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Fondeo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(DepNafin,Decimal)
            If (Critas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Critas")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Critas,String)
            End If
            If (Tipeq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipeq")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Tipeq,String)
            End If
            Me.Adapter.InsertCommand.Parameters(37).Value = CType(Gastos,Decimal)
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(IvaGastos,Decimal)
            If (Tipmon Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipmon")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Tipmon,String)
            End If
            Me.Adapter.InsertCommand.Parameters(40).Value = CType(Mensu,Decimal)
            Me.Adapter.InsertCommand.Parameters(41).Value = CType(Tasmor,Decimal)
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(Taspen,Decimal)
            If (Doc1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Doc1")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Doc1,String)
            End If
            If (Doc2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Doc2")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(Doc2,String)
            End If
            If (Doc3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Doc3")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Doc3,String)
            End If
            If (Prendaria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Prendaria")
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Prendaria,String)
            End If
            If (Prenda Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Prenda")
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Prenda,String)
            End If
            If (Observa Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Observa")
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Observa,String)
            End If
            If (Fechafin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fechafin")
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Fechafin,String)
            End If
            Me.Adapter.InsertCommand.Parameters(50).Value = CType(Factor,Decimal)
            Me.Adapter.InsertCommand.Parameters(51).Value = CType(Piso,Decimal)
            Me.Adapter.InsertCommand.Parameters(52).Value = CType(Techo,Decimal)
            Me.Adapter.InsertCommand.Parameters(53).Value = CType(Tasamax,Decimal)
            If (Adeudo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Adeudo")
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(Adeudo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(55).Value = CType(RD,Byte)
            Me.Adapter.InsertCommand.Parameters(56).Value = CType(ImpDG,Decimal)
            Me.Adapter.InsertCommand.Parameters(57).Value = CType(IvaDG,Decimal)
            Me.Adapter.InsertCommand.Parameters(58).Value = CType(Derechos,Decimal)
            Me.Adapter.InsertCommand.Parameters(59).Value = CType(DG,Byte)
            If (GHipotec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GHipotec")
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(GHipotec,String)
            End If
            If (Lugar Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Lugar")
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(Lugar,String)
            End If
            If (Notaria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Notaria")
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(Notaria,String)
            End If
            If (Escritura Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Escritura")
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(Escritura,String)
            End If
            If (Scaneo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Scaneo")
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(Scaneo,String)
            End If
            If (Archivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Archivo")
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(Archivo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(66).Value = CType(Servicio,Decimal)
            Me.Adapter.InsertCommand.Parameters(67).Value = CType(IVAServicio,Decimal)
            If (Fecha_Pago Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fecha_Pago")
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(Fecha_Pago,String)
            End If
            If (Cobertura Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cobertura")
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(Cobertura,String)
            End If
            Me.Adapter.InsertCommand.Parameters(70).Value = CType(Pagos,Byte)
            If (TipoFrecuencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoFrecuencia")
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(TipoFrecuencia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(72).Value = CType(ValorFrecuencia,Byte)
            Me.Adapter.InsertCommand.Parameters(73).Value = CType(Amortizaciones,Byte)
            If (Banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Banco")
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(Banco,String)
            End If
            If (CuentaCLABE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CuentaCLABE")
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(CuentaCLABE,String)
            End If
            If (Autoriza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Autoriza")
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(Autoriza,String)
            End If
            If (Titular Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Titular")
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(Titular,String)
            End If
            If (idCredito Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(idCredito,String)
            End If
            If (Minds.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(Minds.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMinds(ByVal Anexo As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Anexo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Anexo")
            Else
                command.Parameters(0).Value = CType(Anexo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AviosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Avios"
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Ciclo", "Ciclo")
            tableMapping.ColumnMappings.Add("Flcan", "Flcan")
            tableMapping.ColumnMappings.Add("IDCredito", "IDCredito")
            tableMapping.ColumnMappings.Add("Tipar", "Tipar")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("IDPersona", "IDPersona")
            tableMapping.ColumnMappings.Add("IDDTU", "IDDTU")
            tableMapping.ColumnMappings.Add("IDContrato", "IDContrato")
            tableMapping.ColumnMappings.Add("EstratoActual", "EstratoActual")
            tableMapping.ColumnMappings.Add("SustraeActual", "SustraeActual")
            tableMapping.ColumnMappings.Add("FechaConsulta", "FechaConsulta")
            tableMapping.ColumnMappings.Add("FechaAutorizacion", "FechaAutorizacion")
            tableMapping.ColumnMappings.Add("FechaTerminacion", "FechaTerminacion")
            tableMapping.ColumnMappings.Add("GarantiaPrendaria", "GarantiaPrendaria")
            tableMapping.ColumnMappings.Add("GarantiaHipotecaria", "GarantiaHipotecaria")
            tableMapping.ColumnMappings.Add("GarantiaUsufructo", "GarantiaUsufructo")
            tableMapping.ColumnMappings.Add("LineaActual", "LineaActual")
            tableMapping.ColumnMappings.Add("HectareasActual", "HectareasActual")
            tableMapping.ColumnMappings.Add("Tipta", "Tipta")
            tableMapping.ColumnMappings.Add("Tasas", "Tasas")
            tableMapping.ColumnMappings.Add("DiferencialFINAGIL", "DiferencialFINAGIL")
            tableMapping.ColumnMappings.Add("DiferencialFIRA", "DiferencialFIRA")
            tableMapping.ColumnMappings.Add("CostoHectarea", "CostoHectarea")
            tableMapping.ColumnMappings.Add("PrecioTonelada", "PrecioTonelada")
            tableMapping.ColumnMappings.Add("ToneladasHectarea", "ToneladasHectarea")
            tableMapping.ColumnMappings.Add("Verificado", "Verificado")
            tableMapping.ColumnMappings.Add("Predios", "Predios")
            tableMapping.ColumnMappings.Add("Muebles", "Muebles")
            tableMapping.ColumnMappings.Add("Inmuebles", "Inmuebles")
            tableMapping.ColumnMappings.Add("Usufructo", "Usufructo")
            tableMapping.ColumnMappings.Add("Semilla", "Semilla")
            tableMapping.ColumnMappings.Add("UltimoCorte", "UltimoCorte")
            tableMapping.ColumnMappings.Add("Parafin", "Parafin")
            tableMapping.ColumnMappings.Add("FechaLimiteDTC", "FechaLimiteDTC")
            tableMapping.ColumnMappings.Add("FechaContrato", "FechaContrato")
            tableMapping.ColumnMappings.Add("FechaSiembrai", "FechaSiembrai")
            tableMapping.ColumnMappings.Add("FechaSiembraf", "FechaSiembraf")
            tableMapping.ColumnMappings.Add("FechaCosechai", "FechaCosechai")
            tableMapping.ColumnMappings.Add("FechaCosechaf", "FechaCosechaf")
            tableMapping.ColumnMappings.Add("Porcomi", "Porcomi")
            tableMapping.ColumnMappings.Add("FechaTermino2", "FechaTermino2")
            tableMapping.ColumnMappings.Add("FechaTermino3", "FechaTermino3")
            tableMapping.ColumnMappings.Add("SegundoCiclo", "SegundoCiclo")
            tableMapping.ColumnMappings.Add("TercerCiclo", "TercerCiclo")
            tableMapping.ColumnMappings.Add("FechaSiembra2", "FechaSiembra2")
            tableMapping.ColumnMappings.Add("FechaSiembra3", "FechaSiembra3")
            tableMapping.ColumnMappings.Add("FechaCosecha2", "FechaCosecha2")
            tableMapping.ColumnMappings.Add("FechaCosecha3", "FechaCosecha3")
            tableMapping.ColumnMappings.Add("FechaLimiteDTC2", "FechaLimiteDTC2")
            tableMapping.ColumnMappings.Add("FechaLimiteDTC3", "FechaLimiteDTC3")
            tableMapping.ColumnMappings.Add("CostoMaxHa", "CostoMaxHa")
            tableMapping.ColumnMappings.Add("LineaMax", "LineaMax")
            tableMapping.ColumnMappings.Add("GaranteHip", "GaranteHip")
            tableMapping.ColumnMappings.Add("GarantePre", "GarantePre")
            tableMapping.ColumnMappings.Add("Fondeo", "Fondeo")
            tableMapping.ColumnMappings.Add("Minds", "Minds")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Avios] ([Anexo], [Ciclo], [Flcan], [IDCredito], [Tipar], [Cliente], "& _ 
                "[IDPersona], [IDDTU], [IDContrato], [EstratoActual], [SustraeActual], [FechaCons"& _ 
                "ulta], [FechaAutorizacion], [FechaTerminacion], [GarantiaPrendaria], [GarantiaHi"& _ 
                "potecaria], [GarantiaUsufructo], [LineaActual], [HectareasActual], [Tipta], [Tas"& _ 
                "as], [DiferencialFINAGIL], [DiferencialFIRA], [CostoHectarea], [PrecioTonelada],"& _ 
                " [ToneladasHectarea], [Verificado], [Predios], [Muebles], [Inmuebles], [Usufruct"& _ 
                "o], [Semilla], [UltimoCorte], [Parafin], [FechaLimiteDTC], [FechaContrato], [Fec"& _ 
                "haSiembrai], [FechaSiembraf], [FechaCosechai], [FechaCosechaf], [Porcomi], [Fech"& _ 
                "aTermino2], [FechaTermino3], [SegundoCiclo], [TercerCiclo], [FechaSiembra2], [Fe"& _ 
                "chaSiembra3], [FechaCosecha2], [FechaCosecha3], [FechaLimiteDTC2], [FechaLimiteD"& _ 
                "TC3], [CostoMaxHa], [LineaMax], [GaranteHip], [GarantePre], [Fondeo], [Minds]) V"& _ 
                "ALUES (@Anexo, @Ciclo, @Flcan, @IDCredito, @Tipar, @Cliente, @IDPersona, @IDDTU,"& _ 
                " @IDContrato, @EstratoActual, @SustraeActual, @FechaConsulta, @FechaAutorizacion"& _ 
                ", @FechaTerminacion, @GarantiaPrendaria, @GarantiaHipotecaria, @GarantiaUsufruct"& _ 
                "o, @LineaActual, @HectareasActual, @Tipta, @Tasas, @DiferencialFINAGIL, @Diferen"& _ 
                "cialFIRA, @CostoHectarea, @PrecioTonelada, @ToneladasHectarea, @Verificado, @Pre"& _ 
                "dios, @Muebles, @Inmuebles, @Usufructo, @Semilla, @UltimoCorte, @Parafin, @Fecha"& _ 
                "LimiteDTC, @FechaContrato, @FechaSiembrai, @FechaSiembraf, @FechaCosechai, @Fech"& _ 
                "aCosechaf, @Porcomi, @FechaTermino2, @FechaTermino3, @SegundoCiclo, @TercerCiclo"& _ 
                ", @FechaSiembra2, @FechaSiembra3, @FechaCosecha2, @FechaCosecha3, @FechaLimiteDT"& _ 
                "C2, @FechaLimiteDTC3, @CostoMaxHa, @LineaMax, @GaranteHip, @GarantePre, @Fondeo,"& _ 
                " @Minds)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ciclo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciclo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flcan", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flcan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDCredito", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDCredito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipar", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cliente", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDPersona", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDPersona", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDDTU", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDDTU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDContrato", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDContrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EstratoActual", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EstratoActual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SustraeActual", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SustraeActual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaConsulta", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaConsulta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaAutorizacion", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaAutorizacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaTerminacion", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaTerminacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GarantiaPrendaria", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GarantiaPrendaria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GarantiaHipotecaria", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GarantiaHipotecaria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GarantiaUsufructo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GarantiaUsufructo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LineaActual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "LineaActual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HectareasActual", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "HectareasActual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipta", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tipta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tasas", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 4, "Tasas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiferencialFINAGIL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "DiferencialFINAGIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiferencialFIRA", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "DiferencialFIRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CostoHectarea", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "CostoHectarea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrecioTonelada", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "PrecioTonelada", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToneladasHectarea", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "ToneladasHectarea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Verificado", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Verificado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Predios", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Predios", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Muebles", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Muebles", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inmuebles", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inmuebles", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Usufructo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Usufructo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semilla", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semilla", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UltimoCorte", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UltimoCorte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parafin", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Parafin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaLimiteDTC", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaLimiteDTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaContrato", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaContrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaSiembrai", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaSiembrai", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaSiembraf", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaSiembraf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaCosechai", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaCosechai", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaCosechaf", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaCosechaf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Porcomi", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "Porcomi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaTermino2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaTermino2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaTermino3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaTermino3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SegundoCiclo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SegundoCiclo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TercerCiclo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TercerCiclo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaSiembra2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaSiembra2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaSiembra3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaSiembra3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaCosecha2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaCosecha2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaCosecha3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaCosecha3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaLimiteDTC2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaLimiteDTC2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaLimiteDTC3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaLimiteDTC3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CostoMaxHa", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "CostoMaxHa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LineaMax", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "LineaMax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GaranteHip", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GaranteHip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GarantePre", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GarantePre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fondeo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fondeo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Minds", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Minds", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Anexo, Ciclo, Flcan, IDCredito, Tipar, Cliente, IDPersona, IDDTU, I"& _ 
                "DContrato, EstratoActual, SustraeActual, FechaConsulta, FechaAutorizacion, Fecha"& _ 
                "Terminacion, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GarantiaPrendaria, GarantiaHipotecaria, "& _ 
                "GarantiaUsufructo, LineaActual, HectareasActual, Tipta, Tasas, DiferencialFINAGI"& _ 
                "L, DiferencialFIRA, CostoHectarea, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PrecioTonelada, To"& _ 
                "neladasHectarea, Verificado, Predios, Muebles, Inmuebles, Usufructo, Semilla, Ul"& _ 
                "timoCorte, Parafin, FechaLimiteDTC, FechaContrato, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Fe"& _ 
                "chaSiembrai, FechaSiembraf, FechaCosechai, FechaCosechaf, Porcomi, FechaTermino2"& _ 
                ", FechaTermino3, SegundoCiclo, TercerCiclo, FechaSiembra2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      FechaSiembra3, FechaCosecha2, FechaCosecha3, FechaLimiteDTC2, FechaLimiteD"& _ 
                "TC3, CostoMaxHa, LineaMax, GaranteHip, GarantePre, Fondeo, Minds"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  Avios"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       Avios"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Minds = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Ciclo = @ciclo) A"& _ 
                "ND (Anexo = @Anexo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ciclo", Global.System.Data.SqlDbType.NChar, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciclo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.AviosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductionDataSet.AviosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductionDataSet.AviosDataTable = New ProductionDataSet.AviosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.AviosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Avios")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Anexo As String,  _
                    ByVal Ciclo As String,  _
                    ByVal Flcan As String,  _
                    ByVal IDCredito As String,  _
                    ByVal Tipar As String,  _
                    ByVal Cliente As String,  _
                    ByVal IDPersona As String,  _
                    ByVal IDDTU As String,  _
                    ByVal IDContrato As String,  _
                    ByVal EstratoActual As String,  _
                    ByVal SustraeActual As String,  _
                    ByVal FechaConsulta As String,  _
                    ByVal FechaAutorizacion As String,  _
                    ByVal FechaTerminacion As String,  _
                    ByVal GarantiaPrendaria As String,  _
                    ByVal GarantiaHipotecaria As String,  _
                    ByVal GarantiaUsufructo As String,  _
                    ByVal LineaActual As Decimal,  _
                    ByVal HectareasActual As Decimal,  _
                    ByVal Tipta As String,  _
                    ByVal Tasas As Decimal,  _
                    ByVal DiferencialFINAGIL As Decimal,  _
                    ByVal DiferencialFIRA As Decimal,  _
                    ByVal CostoHectarea As Decimal,  _
                    ByVal PrecioTonelada As Decimal,  _
                    ByVal ToneladasHectarea As Decimal,  _
                    ByVal Verificado As String,  _
                    ByVal Predios As String,  _
                    ByVal Muebles As String,  _
                    ByVal Inmuebles As String,  _
                    ByVal Usufructo As String,  _
                    ByVal Semilla As String,  _
                    ByVal UltimoCorte As String,  _
                    ByVal Parafin As String,  _
                    ByVal FechaLimiteDTC As String,  _
                    ByVal FechaContrato As String,  _
                    ByVal FechaSiembrai As String,  _
                    ByVal FechaSiembraf As String,  _
                    ByVal FechaCosechai As String,  _
                    ByVal FechaCosechaf As String,  _
                    ByVal Porcomi As Decimal,  _
                    ByVal FechaTermino2 As String,  _
                    ByVal FechaTermino3 As String,  _
                    ByVal SegundoCiclo As String,  _
                    ByVal TercerCiclo As String,  _
                    ByVal FechaSiembra2 As String,  _
                    ByVal FechaSiembra3 As String,  _
                    ByVal FechaCosecha2 As String,  _
                    ByVal FechaCosecha3 As String,  _
                    ByVal FechaLimiteDTC2 As String,  _
                    ByVal FechaLimiteDTC3 As String,  _
                    ByVal CostoMaxHa As Decimal,  _
                    ByVal LineaMax As Decimal,  _
                    ByVal GaranteHip As String,  _
                    ByVal GarantePre As String,  _
                    ByVal Fondeo As String,  _
                    ByVal Minds As Global.System.Nullable(Of Boolean)) As Integer
            If (Anexo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Anexo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Ciclo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ciclo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Ciclo,String)
            End If
            If (Flcan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flcan")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Flcan,String)
            End If
            If (IDCredito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDCredito")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDCredito,String)
            End If
            If (Tipar Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipar")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Tipar,String)
            End If
            If (Cliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cliente")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cliente,String)
            End If
            If (IDPersona Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDPersona")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IDPersona,String)
            End If
            If (IDDTU Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDDTU")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IDDTU,String)
            End If
            If (IDContrato Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDContrato")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IDContrato,String)
            End If
            If (EstratoActual Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EstratoActual")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(EstratoActual,String)
            End If
            If (SustraeActual Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SustraeActual")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SustraeActual,String)
            End If
            If (FechaConsulta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaConsulta")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FechaConsulta,String)
            End If
            If (FechaAutorizacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaAutorizacion")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FechaAutorizacion,String)
            End If
            If (FechaTerminacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaTerminacion")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FechaTerminacion,String)
            End If
            If (GarantiaPrendaria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GarantiaPrendaria")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(GarantiaPrendaria,String)
            End If
            If (GarantiaHipotecaria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GarantiaHipotecaria")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(GarantiaHipotecaria,String)
            End If
            If (GarantiaUsufructo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GarantiaUsufructo")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(GarantiaUsufructo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(LineaActual,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(HectareasActual,Decimal)
            If (Tipta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipta")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Tipta,String)
            End If
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(Tasas,Decimal)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(DiferencialFINAGIL,Decimal)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(DiferencialFIRA,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(CostoHectarea,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrecioTonelada,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(ToneladasHectarea,Decimal)
            If (Verificado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Verificado")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Verificado,String)
            End If
            If (Predios Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Predios")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Predios,String)
            End If
            If (Muebles Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Muebles")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Muebles,String)
            End If
            If (Inmuebles Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Inmuebles")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Inmuebles,String)
            End If
            If (Usufructo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Usufructo")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Usufructo,String)
            End If
            If (Semilla Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Semilla")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Semilla,String)
            End If
            If (UltimoCorte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UltimoCorte")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(UltimoCorte,String)
            End If
            If (Parafin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parafin")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Parafin,String)
            End If
            If (FechaLimiteDTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaLimiteDTC")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(FechaLimiteDTC,String)
            End If
            If (FechaContrato Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaContrato")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(FechaContrato,String)
            End If
            If (FechaSiembrai Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaSiembrai")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(FechaSiembrai,String)
            End If
            If (FechaSiembraf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaSiembraf")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(FechaSiembraf,String)
            End If
            If (FechaCosechai Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaCosechai")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(FechaCosechai,String)
            End If
            If (FechaCosechaf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaCosechaf")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(FechaCosechaf,String)
            End If
            Me.Adapter.InsertCommand.Parameters(40).Value = CType(Porcomi,Decimal)
            If (FechaTermino2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaTermino2")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(FechaTermino2,String)
            End If
            If (FechaTermino3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaTermino3")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(FechaTermino3,String)
            End If
            If (SegundoCiclo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SegundoCiclo")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(SegundoCiclo,String)
            End If
            If (TercerCiclo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TercerCiclo")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(TercerCiclo,String)
            End If
            If (FechaSiembra2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaSiembra2")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(FechaSiembra2,String)
            End If
            If (FechaSiembra3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaSiembra3")
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(FechaSiembra3,String)
            End If
            If (FechaCosecha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaCosecha2")
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(FechaCosecha2,String)
            End If
            If (FechaCosecha3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaCosecha3")
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(FechaCosecha3,String)
            End If
            If (FechaLimiteDTC2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaLimiteDTC2")
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(FechaLimiteDTC2,String)
            End If
            If (FechaLimiteDTC3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FechaLimiteDTC3")
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(FechaLimiteDTC3,String)
            End If
            Me.Adapter.InsertCommand.Parameters(51).Value = CType(CostoMaxHa,Decimal)
            Me.Adapter.InsertCommand.Parameters(52).Value = CType(LineaMax,Decimal)
            If (GaranteHip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GaranteHip")
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(GaranteHip,String)
            End If
            If (GarantePre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GarantePre")
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(GarantePre,String)
            End If
            If (Fondeo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fondeo")
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(Fondeo,String)
            End If
            If (Minds.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(Minds.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateMinds(ByVal ciclo As String, ByVal Anexo As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ciclo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ciclo")
            Else
                command.Parameters(0).Value = CType(ciclo,String)
            End If
            If (Anexo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Anexo")
            Else
                command.Parameters(1).Value = CType(Anexo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Vw_MAXfecVenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Vw_MAXfecVen"
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Feven", "Feven")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Anexo, Feven"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Vw_MAXfecVen"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Anexo = @"& _ 
                "anexo)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.Vw_MAXfecVenDataTable, ByVal anexo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (anexo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(anexo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal anexo As String) As ProductionDataSet.Vw_MAXfecVenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (anexo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(anexo,String)
            End If
            Dim dataTable As ProductionDataSet.Vw_MAXfecVenDataTable = New ProductionDataSet.Vw_MAXfecVenDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EdoctavTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Edoctav"
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Letra", "Letra")
            tableMapping.ColumnMappings.Add("Feven", "Feven")
            tableMapping.ColumnMappings.Add("Nufac", "Nufac")
            tableMapping.ColumnMappings.Add("Indrec", "Indrec")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            tableMapping.ColumnMappings.Add("Abcap", "Abcap")
            tableMapping.ColumnMappings.Add("Inter", "Inter")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("IvaCapital", "IvaCapital")
            tableMapping.ColumnMappings.Add("comFega", "comFega")
            tableMapping.ColumnMappings.Add("ivacomFega", "ivacomFega")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Edoctav] ([Anexo], [Letra], [Feven], [Nufac], [Indrec], [Saldo], [Ab"& _ 
                "cap], [Inter], [Iva], [IvaCapital], [comFega], [ivacomFega]) VALUES (@Anexo, @Le"& _ 
                "tra, @Feven, @Nufac, @Indrec, @Saldo, @Abcap, @Inter, @Iva, @IvaCapital, @comFeg"& _ 
                "a, @ivacomFega)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Letra", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Letra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Feven", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Feven", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nufac", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 0, "Nufac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Indrec", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Indrec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Saldo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Saldo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Abcap", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Abcap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inter", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Inter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Iva", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Iva", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IvaCapital", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "IvaCapital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@comFega", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "comFega", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ivacomFega", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ivacomFega", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Anexo, Letra, Feven, Nufac, Indrec, Saldo, Abcap, Inter, Iva, IvaCa"& _ 
                "pital, comFega, ivacomFega"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Edoctav"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Anexo = @Anex"& _ 
                "o) AND (Letra = @Letra)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Letra", Global.System.Data.SqlDbType.NChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "Letra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        MAX(Saldo) AS Saldo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Edoctav"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Anexo ="& _ 
                " @Anexo) AND (Letra = @Letra)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Letra", Global.System.Data.SqlDbType.NChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "Letra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ISNULL(MAX(Saldo), 0) AS Saldo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Edoctav"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Anexo"& _ 
                " = @Anexo) AND (Feven >= @Fecha)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.NChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Feven", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.EdoctavDataTable, ByVal Anexo As String, ByVal Letra As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Anexo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Letra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Letra,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Anexo As String, ByVal Letra As String) As ProductionDataSet.EdoctavDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Anexo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Letra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Letra,String)
            End If
            Dim dataTable As ProductionDataSet.EdoctavDataTable = New ProductionDataSet.EdoctavDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.EdoctavDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Edoctav")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Anexo As String, ByVal Letra As String, ByVal Feven As String, ByVal Nufac As Global.System.Nullable(Of Decimal), ByVal Indrec As String, ByVal Saldo As Global.System.Nullable(Of Decimal), ByVal Abcap As Global.System.Nullable(Of Decimal), ByVal Inter As Global.System.Nullable(Of Decimal), ByVal Iva As Global.System.Nullable(Of Decimal), ByVal IvaCapital As Global.System.Nullable(Of Decimal), ByVal comFega As Global.System.Nullable(Of Decimal), ByVal ivacomFega As Global.System.Nullable(Of Decimal)) As Integer
            If (Anexo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Letra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Letra,String)
            End If
            If (Feven Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Feven,String)
            End If
            If (Nufac.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Nufac.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Indrec Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Indrec,String)
            End If
            If (Saldo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Saldo.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Abcap.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Abcap.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Inter.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Inter.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Iva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Iva.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IvaCapital.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IvaCapital.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (comFega.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(comFega.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ivacomFega.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ivacomFega.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ScalarSaldo(ByVal Anexo As String, ByVal Letra As String) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Anexo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Letra Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(Letra,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)()
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ScalarSaldoII(ByVal Anexo As String, ByVal Fecha As String) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Anexo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Fecha Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(Fecha,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)()
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Minds_Pagos_AvioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Minds_Pagos_Avio"
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("Promo", "Promo")
            tableMapping.ColumnMappings.Add("Sucursal", "Sucursal")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Numero", "Numero")
            tableMapping.ColumnMappings.Add("Letra", "Letra")
            tableMapping.ColumnMappings.Add("Cheque", "Cheque")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("Tipar", "Tipar")
            tableMapping.ColumnMappings.Add("FechaTerminacion", "FechaTerminacion")
            tableMapping.ColumnMappings.Add("EsEfectivo", "EsEfectivo")
            tableMapping.ColumnMappings.Add("MINDS", "MINDS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Serie, Numero, Fecha, Anexo, Letra, Importe, Cheque, Promo, Cliente"& _ 
                ", Sucursal, Tipar, FechaTerminacion, EsEfectivo, ISNULL(MINDS, 0) AS MINDS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                "            Minds_Pagos_Avio"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Fecha BETWEEN @Fecha AND @FechaLim)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.NChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaLim", Global.System.Data.SqlDbType.NChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        TOP (100) PERCENT SUM(Importe + FEGA + Intereses + Garantia) AS Sal"& _ 
                "do, Anexo, MAX(Ciclo) AS Ciclo, Cliente, SUM(Importe) AS Imp, SUM(FEGA) AS Fega,"& _ 
                " SUM(Garantia) AS Garantia, SUM(Intereses) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS Interes"& _ 
                "es"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            DetalleFINAGIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Anexo = @Anexo) AND (FechaFina"& _ 
                "l <= @Fecha)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Anexo, Cliente"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Anexo, Ciclo, Cliente"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.NChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaFinal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.Minds_Pagos_AvioDataTable, ByVal Fecha As String, ByVal FechaLim As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fecha Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Fecha,String)
            End If
            If (FechaLim Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FechaLim,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Fecha As String, ByVal FechaLim As String) As ProductionDataSet.Minds_Pagos_AvioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fecha Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Fecha,String)
            End If
            If (FechaLim Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FechaLim,String)
            End If
            Dim dataTable As ProductionDataSet.Minds_Pagos_AvioDataTable = New ProductionDataSet.Minds_Pagos_AvioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ScalarSaldo(ByVal Anexo As String, ByVal Fecha As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Anexo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Anexo")
            Else
                command.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Fecha Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(Fecha,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PromotoresTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Promotores"
            tableMapping.ColumnMappings.Add("Promotor", "Promotor")
            tableMapping.ColumnMappings.Add("DescPromotor", "DescPromotor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("APaterno", "APaterno")
            tableMapping.ColumnMappings.Add("AMaterno", "AMaterno")
            tableMapping.ColumnMappings.Add("StatusPromotor", "StatusPromotor")
            tableMapping.ColumnMappings.Add("Iniciales", "Iniciales")
            tableMapping.ColumnMappings.Add("NumEmpleado", "NumEmpleado")
            tableMapping.ColumnMappings.Add("IDPlaza", "IDPlaza")
            tableMapping.ColumnMappings.Add("FechaCarga", "FechaCarga")
            tableMapping.ColumnMappings.Add("Nacionalidad", "Nacionalidad")
            tableMapping.ColumnMappings.Add("Puesto", "Puesto")
            tableMapping.ColumnMappings.Add("Minds", "Minds")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Promotores] ([Promotor], [DescPromotor], [Nombre], [APaterno], [AMat"& _ 
                "erno], [StatusPromotor], [Iniciales], [NumEmpleado], [IDPlaza], [FechaCarga], [N"& _ 
                "acionalidad], [Puesto], [Minds]) VALUES (@Promotor, @DescPromotor, @Nombre, @APa"& _ 
                "terno, @AMaterno, @StatusPromotor, @Iniciales, @NumEmpleado, @IDPlaza, @FechaCar"& _ 
                "ga, @Nacionalidad, @Puesto, @Minds)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Promotor", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Promotor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DescPromotor", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DescPromotor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@APaterno", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "APaterno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AMaterno", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AMaterno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusPromotor", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusPromotor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Iniciales", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Iniciales", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumEmpleado", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumEmpleado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDPlaza", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDPlaza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaCarga", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaCarga", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nacionalidad", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nacionalidad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Puesto", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Puesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Minds", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Minds", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Promotor, DescPromotor, Nombre, APaterno, AMaterno, StatusPromotor, In"& _ 
                "iciales, NumEmpleado, IDPlaza, FechaCarga, Nacionalidad, Puesto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         Minds"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Promotores"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.PromotoresDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductionDataSet.PromotoresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductionDataSet.PromotoresDataTable = New ProductionDataSet.PromotoresDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.PromotoresDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Promotores")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Promotor As String, ByVal DescPromotor As String, ByVal Nombre As String, ByVal APaterno As String, ByVal AMaterno As String, ByVal StatusPromotor As String, ByVal Iniciales As String, ByVal NumEmpleado As String, ByVal IDPlaza As String, ByVal FechaCarga As String, ByVal Nacionalidad As String, ByVal Puesto As String, ByVal Minds As Global.System.Nullable(Of Boolean)) As Integer
            If (Promotor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Promotor")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Promotor,String)
            End If
            If (DescPromotor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DescPromotor")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DescPromotor,String)
            End If
            If (Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Nombre,String)
            End If
            If (APaterno Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(APaterno,String)
            End If
            If (AMaterno Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AMaterno,String)
            End If
            If (StatusPromotor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StatusPromotor")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatusPromotor,String)
            End If
            If (Iniciales Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Iniciales")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Iniciales,String)
            End If
            If (NumEmpleado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(NumEmpleado,String)
            End If
            If (IDPlaza Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IDPlaza,String)
            End If
            If (FechaCarga Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FechaCarga,String)
            End If
            If (Nacionalidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Nacionalidad,String)
            End If
            If (Puesto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Puesto,String)
            End If
            If (Minds.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Minds.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReferenciadoEnEfectivoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ReferenciadoEnEfectivo"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Anexo", "Anexo")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Rerferencia", "Rerferencia")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("Banco", "Banco")
            tableMapping.ColumnMappings.Add("FechaMoV", "FechaMoV")
            tableMapping.ColumnMappings.Add("RerferenciaORG", "RerferenciaORG")
            tableMapping.ColumnMappings.Add("RerferenciaORG1", "RerferenciaORG1")
            tableMapping.ColumnMappings.Add("ImporteEfectivo", "ImporteEfectivo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ReferenciadoEnEfectivo] WHERE (([ID] = @Original_ID) AND ((@IsNull_A"& _ 
                "nexo = 1 AND [Anexo] IS NULL) OR ([Anexo] = @Original_Anexo)) AND ((@IsNull_Fech"& _ 
                "a = 1 AND [Fecha] IS NULL) OR ([Fecha] = @Original_Fecha)) AND ((@IsNull_Rerfere"& _ 
                "ncia = 1 AND [Rerferencia] IS NULL) OR ([Rerferencia] = @Original_Rerferencia)) "& _ 
                "AND ((@IsNull_Importe = 1 AND [Importe] IS NULL) OR ([Importe] = @Original_Impor"& _ 
                "te)) AND ((@IsNull_Banco = 1 AND [Banco] IS NULL) OR ([Banco] = @Original_Banco)"& _ 
                ") AND ((@IsNull_FechaMoV = 1 AND [FechaMoV] IS NULL) OR ([FechaMoV] = @Original_"& _ 
                "FechaMoV)) AND ((@IsNull_RerferenciaORG = 1 AND [RerferenciaORG] IS NULL) OR ([R"& _ 
                "erferenciaORG] = @Original_RerferenciaORG)) AND ((@IsNull_RerferenciaORG1 = 1 AN"& _ 
                "D [RerferenciaORG1] IS NULL) OR ([RerferenciaORG1] = @Original_RerferenciaORG1))"& _ 
                " AND ((@IsNull_ImporteEfectivo = 1 AND [ImporteEfectivo] IS NULL) OR ([ImporteEf"& _ 
                "ectivo] = @Original_ImporteEfectivo)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anexo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Rerferencia", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rerferencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Importe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Importe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Importe", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Importe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FechaMoV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FechaMoV", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RerferenciaORG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RerferenciaORG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RerferenciaORG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RerferenciaORG1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ImporteEfectivo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImporteEfectivo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ImporteEfectivo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImporteEfectivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ReferenciadoEnEfectivo] ([Anexo], [Fecha], [Rerferencia], [Importe],"& _ 
                " [Banco], [FechaMoV], [RerferenciaORG], [RerferenciaORG1], [ImporteEfectivo]) VA"& _ 
                "LUES (@Anexo, @Fecha, @Rerferencia, @Importe, @Banco, @FechaMoV, @RerferenciaORG"& _ 
                ", @RerferenciaORG1, @ImporteEfectivo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Anexo, Fecha, Rerferencia, Im"& _ 
                "porte, Banco, FechaMoV, RerferenciaORG, RerferenciaORG1, ImporteEfectivo FROM Re"& _ 
                "ferenciadoEnEfectivo WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rerferencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Importe", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Importe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaMoV", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RerferenciaORG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RerferenciaORG1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImporteEfectivo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImporteEfectivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ReferenciadoEnEfectivo] SET [Anexo] = @Anexo, [Fecha] = @Fecha, [Rerferen"& _ 
                "cia] = @Rerferencia, [Importe] = @Importe, [Banco] = @Banco, [FechaMoV] = @Fecha"& _ 
                "MoV, [RerferenciaORG] = @RerferenciaORG, [RerferenciaORG1] = @RerferenciaORG1, ["& _ 
                "ImporteEfectivo] = @ImporteEfectivo WHERE (([ID] = @Original_ID) AND ((@IsNull_A"& _ 
                "nexo = 1 AND [Anexo] IS NULL) OR ([Anexo] = @Original_Anexo)) AND ((@IsNull_Fech"& _ 
                "a = 1 AND [Fecha] IS NULL) OR ([Fecha] = @Original_Fecha)) AND ((@IsNull_Rerfere"& _ 
                "ncia = 1 AND [Rerferencia] IS NULL) OR ([Rerferencia] = @Original_Rerferencia)) "& _ 
                "AND ((@IsNull_Importe = 1 AND [Importe] IS NULL) OR ([Importe] = @Original_Impor"& _ 
                "te)) AND ((@IsNull_Banco = 1 AND [Banco] IS NULL) OR ([Banco] = @Original_Banco)"& _ 
                ") AND ((@IsNull_FechaMoV = 1 AND [FechaMoV] IS NULL) OR ([FechaMoV] = @Original_"& _ 
                "FechaMoV)) AND ((@IsNull_RerferenciaORG = 1 AND [RerferenciaORG] IS NULL) OR ([R"& _ 
                "erferenciaORG] = @Original_RerferenciaORG)) AND ((@IsNull_RerferenciaORG1 = 1 AN"& _ 
                "D [RerferenciaORG1] IS NULL) OR ([RerferenciaORG1] = @Original_RerferenciaORG1))"& _ 
                " AND ((@IsNull_ImporteEfectivo = 1 AND [ImporteEfectivo] IS NULL) OR ([ImporteEf"& _ 
                "ectivo] = @Original_ImporteEfectivo)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Anexo, Fecha, Rerferencia, I"& _ 
                "mporte, Banco, FechaMoV, RerferenciaORG, RerferenciaORG1, ImporteEfectivo FROM R"& _ 
                "eferenciadoEnEfectivo WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rerferencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Importe", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Importe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaMoV", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RerferenciaORG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RerferenciaORG1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImporteEfectivo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImporteEfectivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Anexo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Anexo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anexo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Rerferencia", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rerferencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rerferencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Importe", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Importe", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Importe", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "Importe", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Banco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Banco", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FechaMoV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FechaMoV", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FechaMoV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RerferenciaORG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RerferenciaORG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RerferenciaORG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RerferenciaORG1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ImporteEfectivo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImporteEfectivo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ImporteEfectivo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 11, 2, "ImporteEfectivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = "Data Source=server-raid;Initial Catalog=production;Persist Security Info=True;Use"& _ 
                "r ID=User_PRO;Password=User_PRO2015"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, Anexo, Fecha, Rerferencia, Importe, Banco, FechaMoV, RerferenciaOR"& _ 
                "G, RerferenciaORG1, ImporteEfectivo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ReferenciadoEnEfectivo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (RerferenciaORG = @REF1) AND (Fecha = @fec) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Rerfe"& _ 
                "renciaORG1 = @REF2) AND (Fecha = @fec)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REF1", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fec", Global.System.Data.SqlDbType.NChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REF2", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RerferenciaORG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductionDataSet.ReferenciadoEnEfectivoDataTable, ByVal REF1 As String, ByVal fec As String, ByVal REF2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (REF1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REF1,String)
            End If
            If (fec Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fec,String)
            End If
            If (REF2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(REF2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal REF1 As String, ByVal fec As String, ByVal REF2 As String) As ProductionDataSet.ReferenciadoEnEfectivoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (REF1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REF1,String)
            End If
            If (fec Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fec,String)
            End If
            If (REF2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(REF2,String)
            End If
            Dim dataTable As ProductionDataSet.ReferenciadoEnEfectivoDataTable = New ProductionDataSet.ReferenciadoEnEfectivoDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductionDataSet.ReferenciadoEnEfectivoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ReferenciadoEnEfectivo")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_Anexo As String, ByVal Original_Fecha As String, ByVal Original_Rerferencia As String, ByVal Original_Importe As Global.System.Nullable(Of Decimal), ByVal Original_Banco As String, ByVal Original_FechaMoV As Global.System.Nullable(Of Date), ByVal Original_RerferenciaORG As String, ByVal Original_RerferenciaORG1 As String, ByVal Original_ImporteEfectivo As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_Anexo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Anexo,String)
            End If
            If (Original_Fecha Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Fecha,String)
            End If
            If (Original_Rerferencia Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Rerferencia,String)
            End If
            If (Original_Importe.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Importe.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Banco Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Banco,String)
            End If
            If (Original_FechaMoV.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FechaMoV.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_RerferenciaORG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_RerferenciaORG,String)
            End If
            If (Original_RerferenciaORG1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_RerferenciaORG1,String)
            End If
            If (Original_ImporteEfectivo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ImporteEfectivo.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Anexo As String, ByVal Fecha As String, ByVal Rerferencia As String, ByVal Importe As Global.System.Nullable(Of Decimal), ByVal Banco As String, ByVal FechaMoV As Global.System.Nullable(Of Date), ByVal RerferenciaORG As String, ByVal RerferenciaORG1 As String, ByVal ImporteEfectivo As Global.System.Nullable(Of Decimal)) As Integer
            If (Anexo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Fecha Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Fecha,String)
            End If
            If (Rerferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Rerferencia,String)
            End If
            If (Importe.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Importe.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Banco Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Banco,String)
            End If
            If (FechaMoV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FechaMoV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RerferenciaORG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RerferenciaORG,String)
            End If
            If (RerferenciaORG1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RerferenciaORG1,String)
            End If
            If (ImporteEfectivo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ImporteEfectivo.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Anexo As String,  _
                    ByVal Fecha As String,  _
                    ByVal Rerferencia As String,  _
                    ByVal Importe As Global.System.Nullable(Of Decimal),  _
                    ByVal Banco As String,  _
                    ByVal FechaMoV As Global.System.Nullable(Of Date),  _
                    ByVal RerferenciaORG As String,  _
                    ByVal RerferenciaORG1 As String,  _
                    ByVal ImporteEfectivo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_Anexo As String,  _
                    ByVal Original_Fecha As String,  _
                    ByVal Original_Rerferencia As String,  _
                    ByVal Original_Importe As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banco As String,  _
                    ByVal Original_FechaMoV As Global.System.Nullable(Of Date),  _
                    ByVal Original_RerferenciaORG As String,  _
                    ByVal Original_RerferenciaORG1 As String,  _
                    ByVal Original_ImporteEfectivo As Global.System.Nullable(Of Decimal),  _
                    ByVal ID As Decimal) As Integer
            If (Anexo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Anexo,String)
            End If
            If (Fecha Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Fecha,String)
            End If
            If (Rerferencia Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Rerferencia,String)
            End If
            If (Importe.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Importe.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Banco Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Banco,String)
            End If
            If (FechaMoV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FechaMoV.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RerferenciaORG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RerferenciaORG,String)
            End If
            If (RerferenciaORG1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RerferenciaORG1,String)
            End If
            If (ImporteEfectivo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ImporteEfectivo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ID,Decimal)
            If (Original_Anexo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Anexo,String)
            End If
            If (Original_Fecha Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Fecha,String)
            End If
            If (Original_Rerferencia Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Rerferencia,String)
            End If
            If (Original_Importe.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Importe.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Banco Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Banco,String)
            End If
            If (Original_FechaMoV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FechaMoV.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_RerferenciaORG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_RerferenciaORG,String)
            End If
            If (Original_RerferenciaORG1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_RerferenciaORG1,String)
            End If
            If (Original_ImporteEfectivo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ImporteEfectivo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Anexo As String,  _
                    ByVal Fecha As String,  _
                    ByVal Rerferencia As String,  _
                    ByVal Importe As Global.System.Nullable(Of Decimal),  _
                    ByVal Banco As String,  _
                    ByVal FechaMoV As Global.System.Nullable(Of Date),  _
                    ByVal RerferenciaORG As String,  _
                    ByVal RerferenciaORG1 As String,  _
                    ByVal ImporteEfectivo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_Anexo As String,  _
                    ByVal Original_Fecha As String,  _
                    ByVal Original_Rerferencia As String,  _
                    ByVal Original_Importe As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Banco As String,  _
                    ByVal Original_FechaMoV As Global.System.Nullable(Of Date),  _
                    ByVal Original_RerferenciaORG As String,  _
                    ByVal Original_RerferenciaORG1 As String,  _
                    ByVal Original_ImporteEfectivo As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Anexo, Fecha, Rerferencia, Importe, Banco, FechaMoV, RerferenciaORG, RerferenciaORG1, ImporteEfectivo, Original_ID, Original_Anexo, Original_Fecha, Original_Rerferencia, Original_Importe, Original_Banco, Original_FechaMoV, Original_RerferenciaORG, Original_RerferenciaORG1, Original_ImporteEfectivo, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _clientesTableAdapter As ClientesTableAdapter
        
        Private _anexosTableAdapter As AnexosTableAdapter
        
        Private _aviosTableAdapter As AviosTableAdapter
        
        Private _edoctavTableAdapter As EdoctavTableAdapter
        
        Private _promotoresTableAdapter As PromotoresTableAdapter
        
        Private _referenciadoEnEfectivoTableAdapter As ReferenciadoEnEfectivoTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ClientesTableAdapter() As ClientesTableAdapter
            Get
                Return Me._clientesTableAdapter
            End Get
            Set
                Me._clientesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AnexosTableAdapter() As AnexosTableAdapter
            Get
                Return Me._anexosTableAdapter
            End Get
            Set
                Me._anexosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AviosTableAdapter() As AviosTableAdapter
            Get
                Return Me._aviosTableAdapter
            End Get
            Set
                Me._aviosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EdoctavTableAdapter() As EdoctavTableAdapter
            Get
                Return Me._edoctavTableAdapter
            End Get
            Set
                Me._edoctavTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PromotoresTableAdapter() As PromotoresTableAdapter
            Get
                Return Me._promotoresTableAdapter
            End Get
            Set
                Me._promotoresTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ReferenciadoEnEfectivoTableAdapter() As ReferenciadoEnEfectivoTableAdapter
            Get
                Return Me._referenciadoEnEfectivoTableAdapter
            End Get
            Set
                Me._referenciadoEnEfectivoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._clientesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._clientesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._clientesTableAdapter.Connection
                End If
                If ((Not (Me._anexosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._anexosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._anexosTableAdapter.Connection
                End If
                If ((Not (Me._aviosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aviosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aviosTableAdapter.Connection
                End If
                If ((Not (Me._edoctavTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._edoctavTableAdapter.Connection) Is Nothing)) Then
                    Return Me._edoctavTableAdapter.Connection
                End If
                If ((Not (Me._promotoresTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._promotoresTableAdapter.Connection) Is Nothing)) Then
                    Return Me._promotoresTableAdapter.Connection
                End If
                If ((Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._referenciadoEnEfectivoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._referenciadoEnEfectivoTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._clientesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._anexosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aviosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ProductionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._clientesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Clientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._clientesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._anexosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Anexos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._anexosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aviosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Avios.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aviosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Edoctav.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._edoctavTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Promotores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._promotoresTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ReferenciadoEnEfectivo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._referenciadoEnEfectivoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ProductionDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._clientesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Clientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._clientesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._anexosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Anexos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._anexosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aviosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Avios.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aviosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Edoctav.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._edoctavTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Promotores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._promotoresTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ReferenciadoEnEfectivo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._referenciadoEnEfectivoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ProductionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ReferenciadoEnEfectivo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._referenciadoEnEfectivoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Promotores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._promotoresTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Edoctav.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._edoctavTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aviosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Avios.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aviosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._anexosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Anexos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._anexosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._clientesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Clientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._clientesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ProductionDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._clientesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._clientesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._anexosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._anexosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aviosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aviosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._edoctavTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._edoctavTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._promotoresTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._promotoresTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._referenciadoEnEfectivoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._clientesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._clientesTableAdapter, Me._clientesTableAdapter.Connection)
                    Me._clientesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._clientesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._clientesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._clientesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._clientesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._anexosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._anexosTableAdapter, Me._anexosTableAdapter.Connection)
                    Me._anexosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._anexosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._anexosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._anexosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._anexosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aviosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aviosTableAdapter, Me._aviosTableAdapter.Connection)
                    Me._aviosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aviosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aviosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aviosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aviosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._edoctavTableAdapter, Me._edoctavTableAdapter.Connection)
                    Me._edoctavTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._edoctavTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._edoctavTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._edoctavTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._edoctavTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._promotoresTableAdapter, Me._promotoresTableAdapter.Connection)
                    Me._promotoresTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._promotoresTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._promotoresTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._promotoresTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._promotoresTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._referenciadoEnEfectivoTableAdapter, Me._referenciadoEnEfectivoTableAdapter.Connection)
                    Me._referenciadoEnEfectivoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._referenciadoEnEfectivoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._referenciadoEnEfectivoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._referenciadoEnEfectivoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._referenciadoEnEfectivoTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._clientesTableAdapter) Is Nothing) Then
                    Me._clientesTableAdapter.Connection = CType(revertConnections(Me._clientesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._clientesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._anexosTableAdapter) Is Nothing) Then
                    Me._anexosTableAdapter.Connection = CType(revertConnections(Me._anexosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._anexosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aviosTableAdapter) Is Nothing) Then
                    Me._aviosTableAdapter.Connection = CType(revertConnections(Me._aviosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aviosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._edoctavTableAdapter) Is Nothing) Then
                    Me._edoctavTableAdapter.Connection = CType(revertConnections(Me._edoctavTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._edoctavTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._promotoresTableAdapter) Is Nothing) Then
                    Me._promotoresTableAdapter.Connection = CType(revertConnections(Me._promotoresTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._promotoresTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._referenciadoEnEfectivoTableAdapter) Is Nothing) Then
                    Me._referenciadoEnEfectivoTableAdapter.Connection = CType(revertConnections(Me._referenciadoEnEfectivoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._referenciadoEnEfectivoTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
